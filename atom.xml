<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qill</title>
  <subtitle>Qill</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qiil.github.io/qill.github.io/"/>
  <updated>2017-12-21T03:01:35.739Z</updated>
  <id>https://qiil.github.io/qill.github.io/</id>
  
  <author>
    <name>Qill</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VScode调试配置</title>
    <link href="https://qiil.github.io/qill.github.io/2017/12/21/VScode%E8%B0%83%E8%AF%95%E9%85%8D%E7%BD%AE/"/>
    <id>https://qiil.github.io/qill.github.io/2017/12/21/VScode调试配置/</id>
    <published>2017-12-21T02:58:08.000Z</published>
    <updated>2017-12-21T03:01:35.739Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="comment">// Use IntelliSense to learn about possible Node.js debug attributes.</span></div><div class="line">	<span class="comment">// Hover to view descriptions of existing attributes.</span></div><div class="line">	<span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></div><div class="line">	<span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">	<span class="string">"configurations"</span>: [</div><div class="line">		&#123;</div><div class="line">		 	<span class="string">"type"</span>: <span class="string">"node"</span>,</div><div class="line">		 	<span class="string">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">		 	<span class="string">"name"</span>: <span class="string">"Launch Program"</span>,</div><div class="line">		 	<span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/app.js"</span></div><div class="line">		&#125;,</div><div class="line">		&#123;</div><div class="line">			<span class="string">"name"</span>: <span class="string">"mocha"</span>,</div><div class="line">			<span class="string">"type"</span>: <span class="string">"node"</span>,</div><div class="line">			<span class="string">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">			<span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/node_modules/mocha/bin/_mocha"</span>,</div><div class="line">			<span class="string">"stopOnEntry"</span>: <span class="literal">false</span>,</div><div class="line">			<span class="string">"args"</span>: [<span class="string">"--no-timeouts"</span>, <span class="string">"--colors"</span>], <span class="comment">//you can specify paths to specific tests here</span></div><div class="line">			<span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>,</div><div class="line">			<span class="string">"runtimeExecutable"</span>: <span class="literal">null</span>,</div><div class="line">			<span class="string">"env"</span>: &#123;</div><div class="line">				<span class="string">"NODE_ENV"</span>: <span class="string">"testing"</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>configurations[0]可以让vscode进入调试模式运行,跑到断点,然后配合F5,F10,F11等进行调试.<br>configurations[1]可以让vscode用调试模式跑单元测试样例.</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
    
      <category term="vscode debug" scheme="https://qiil.github.io/qill.github.io/tags/vscode-debug/"/>
    
  </entry>
  
  <entry>
    <title>JIRA简单登录获取请求REST_API权限</title>
    <link href="https://qiil.github.io/qill.github.io/2017/12/21/JIRA%E7%AE%80%E5%8D%95%E7%99%BB%E5%BD%95%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82REST-API%E6%9D%83%E9%99%90/"/>
    <id>https://qiil.github.io/qill.github.io/2017/12/21/JIRA简单登录获取请求REST-API权限/</id>
    <published>2017-12-21T02:57:46.000Z</published>
    <updated>2017-12-21T03:01:11.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JIRA-REST-API简单登录获取权限"><a href="#JIRA-REST-API简单登录获取权限" class="headerlink" title="JIRA REST API简单登录获取权限"></a>JIRA REST API简单登录获取权限</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>Jira的 REST API是被Jira提供的标准web接口限制和保护的.这意味如果你不登录,那么你访问Jira的是匿名访问的.更进一步,如果你登录了,但是并没有相关Jira的权限的话,也是不能够获取到Jira的REST API数据的.</p>
<p>很多情况下,第一步用上Jira REST API是认证一个用户账号.任何针对Jira的账号都可以用于REST API,下面将会讲解一个简单的简单认证样例.</p>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><p>很多用户软件提供了一个简单的机制用于支持用户名密码登录并且自动构建一个必须的用户认证头部.例如你可以制定 -u 参数如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -D- -u fred:fred -X GET -H <span class="string">"Content-Type: application/json"</span> https://example.com:8081/rest/api/2/issue/createmeta</div></pre></td></tr></table></figure></p>
<h3 id="提供基本的认证头部"><a href="#提供基本的认证头部" class="headerlink" title="提供基本的认证头部"></a>提供基本的认证头部</h3><p>如果你需要构造并且发送一个基本认证头部的话,下面这几个步骤是你需要做的:</p>
<ol>
<li>构建一个字符串,格式为 username:password</li>
<li>Base64 编码这串字符串</li>
<li>提供一个”Authorization”头部包括”Basic”参数在后面.例如 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">```bash</div><div class="line">curl -D- -X GET -H &quot;Authorization: Basic ZnJlZDpmcmVk&quot; -H &quot;Content-Type: application/json&quot; &quot;https://your-domain.atlassian.net/rest/api/2/issue/QA-31&quot;</div></pre></td></tr></table></figure></li>
</ol>
<h3 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h3><h4 id="认证挑战"><a href="#认证挑战" class="headerlink" title="认证挑战"></a>认证挑战</h4><p>因为JIRA给了一个默认等级给匿名的用户.这就不会提供了一个很典型的认证挑战.一些HTTP客户端希望在他们设置一个认证头文件之前去接受一个认证挑战,这就意味着这是不可能实现的.在这种情况下你可能需要去确认并且提供一个认证的头部(向上问讲述的那样子)</p>
<h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>在连续的登录错误之后验证码是需要被触发的,如果验证码别触发了,你就不能够用基本认证来调用JIRA REST API了.<br>你可以从JIRA中检查相关错误返回,如果存在<code>X-Seraph-LoginReason</code> 头部并且其值为<code>AUTHENTICATION_DENIED</code>,这就意味着app拒绝登录并且拒绝检查密码,这最经常的情况就是验证码被触发了.</p>
<h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul>
<li><a href="https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-cookie-based-authentication/" target="_blank" rel="external">Jira REST API - Cookie-based Authentication</a></li>
<li><a href="https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-oauth-authentication/" target="_blank" rel="external">Jira REST API - OAuth authentication</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JIRA-REST-API简单登录获取权限&quot;&gt;&lt;a href=&quot;#JIRA-REST-API简单登录获取权限&quot; class=&quot;headerlink&quot; title=&quot;JIRA REST API简单登录获取权限&quot;&gt;&lt;/a&gt;JIRA REST API简单登录获取权限&lt;/
    
    </summary>
    
    
      <category term="jira Restful" scheme="https://qiil.github.io/qill.github.io/tags/jira-Restful/"/>
    
  </entry>
  
  <entry>
    <title>JIRA 接口接入估算</title>
    <link href="https://qiil.github.io/qill.github.io/2017/12/21/JIRA-%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%85%A5%E4%BC%B0%E7%AE%97/"/>
    <id>https://qiil.github.io/qill.github.io/2017/12/21/JIRA-接口接入估算/</id>
    <published>2017-12-21T02:57:33.000Z</published>
    <updated>2017-12-21T03:00:10.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JIRA相关技术接入评估"><a href="#JIRA相关技术接入评估" class="headerlink" title="JIRA相关技术接入评估"></a>JIRA相关技术接入评估</h3><hr>
<h4 id="主要接入工作"><a href="#主要接入工作" class="headerlink" title="主要接入工作"></a>主要接入工作</h4><ol>
<li>同步KPI与JIRA平台账号</li>
<li>KPI考核项可修改</li>
<li>JIRA平台BASIC或者Oauth2.0认证用户对接</li>
<li>KPI考核项目配置需求</li>
<li>JIRA接口具体字段分析</li>
<li>JQL搜索语言接入使用</li>
</ol>
<h4 id="主要接口"><a href="#主要接口" class="headerlink" title="主要接口"></a>主要接口</h4><ol>
<li><code>GET /rest/api/2/auditing/record</code> 获取审计报告相关信息(admin账号)</li>
<li><code>GET /rest/api/2/component</code> 获取模块简要信息</li>
<li><code>GET /rest/api/2/component/{id}</code> 获取模块详细信息</li>
<li><code>GET /rest/api/2/component/{id}/relatedIssueCounts</code> 获取模块问题数</li>
<li><code>GET /rest/api/2/myself</code> 获取当前用户信息</li>
<li><code>GET /rest/api/2/project</code> 获取项目信息</li>
<li><code>GET /rest/api/2/project/{projectId or Key}</code> 获取项目信息详情</li>
<li><code>GET /rest/api/2/project/IOT4LHOUSE/components</code> 获取项目的模块列表</li>
<li><code>GET /rest/api/2/issue/{issueIdOrKey}</code> 获取ISSUE详细信息</li>
<li><code>GET /rest/api/2/status</code> 获取所有issue状态配置</li>
<li><code>GET /rest/api/2/search</code> 通过JQL语言搜索相关issue</li>
</ol>
<h4 id="相关难点与工作重点"><a href="#相关难点与工作重点" class="headerlink" title="相关难点与工作重点"></a>相关难点与工作重点</h4><ol>
<li>JIRA与KPI的用户认证需要通过JIRA用户,并且需要用到相关的信息编码后进行认证,KPI平台原本的用户账号密码系统需要废除并重新与JIRA账户系统匹配.</li>
<li>引入JIRA数据会导致KPI考核项目的改变需要重新定义考核表的结构,以前的数据需要备份,因为结构改变后数据会出现断层,并且之前相关的接口需要重写.</li>
<li>JQL语言是Atlassian公司针对对与JIRA数据搜索的语言,需要学习理解并且用到项目上.</li>
<li>JIRA中的接口文档为英文文档,相关字段意思需要与当前JIRA系统对照确认.</li>
</ol>
<h4 id="相关评估以及资源"><a href="#相关评估以及资源" class="headerlink" title="相关评估以及资源"></a>相关评估以及资源</h4><ol>
<li>对接数据较多,明确需求能够使工作目标更明确.</li>
<li>JIRA更详尽信息的相关rest api需要用到管理员账号.</li>
</ol>
<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-cookie-based-authentication/" target="_blank" rel="external">Jira REST API - Cookie-based Authentication</a><br><a href="https://developer.atlassian.com/cloud/jira/platform/jira-rest-api-oauth-authentication/" target="_blank" rel="external">Jira REST API - OAuth authentication</a><br><a href="https://docs.atlassian.com/jira/REST/cloud/#api/2/user/search/query-search" target="_blank" rel="external">Jira REAT API DOC</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JIRA相关技术接入评估&quot;&gt;&lt;a href=&quot;#JIRA相关技术接入评估&quot; class=&quot;headerlink&quot; title=&quot;JIRA相关技术接入评估&quot;&gt;&lt;/a&gt;JIRA相关技术接入评估&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;主要接入工作&quot;&gt;&lt;a href=&quot;#主要
    
    </summary>
    
    
      <category term="jira Restful" scheme="https://qiil.github.io/qill.github.io/tags/jira-Restful/"/>
    
  </entry>
  
  <entry>
    <title>JIRA REST API部分标注</title>
    <link href="https://qiil.github.io/qill.github.io/2017/12/21/JIRA-REST-API%E9%83%A8%E5%88%86%E6%A0%87%E6%B3%A8/"/>
    <id>https://qiil.github.io/qill.github.io/2017/12/21/JIRA-REST-API部分标注/</id>
    <published>2017-12-21T02:56:53.000Z</published>
    <updated>2017-12-21T02:59:28.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JIRA-REST-API-标注"><a href="#JIRA-REST-API-标注" class="headerlink" title="JIRA REST API 标注"></a>JIRA REST API 标注</h3><ul>
<li>GET premission   <figure class="highlight plain"><figcaption><span>/rest/api/2/mypermissions```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">返回系统所有的权限,并且关乎是否当前用户拥有这些权限.你可以可选的提供一个特定的文本来获取这些权限(projectKey 或者 projectId 或者 issueKey 或者 issueId)</div><div class="line"></div><div class="line">当没有特殊字段提供的时候,会返回用户在任何一个项目都为的改权限都为true的权限.</div><div class="line"></div><div class="line">如果提供了项目相关的搜索字段,那么会返回当前用户在搜索项目中权限为ture的字段</div><div class="line"></div><div class="line">- `GET /rest/api/2/attachment/meta` 返回附件的元信息,指出器是否可用和最大的上传限制</div><div class="line"></div><div class="line">- `GET /rest/api/2/auditing/record` 获取审计报告相关信息(admin账号)</div><div class="line"></div><div class="line">paramter | type | description</div><div class="line">---- | ---- | ----</div><div class="line">offset | int | 跳过条数</div><div class="line">limit | int | 返回条数</div><div class="line">filter | string | 搜索条件，返回的每个记录都必定会满足提供的条件</div><div class="line">from | string | 时间戳,from参数限制为小于或等于否则的话返回结果很可能是空的</div><div class="line">to | string | 时间戳与from对应</div><div class="line"></div><div class="line">- `GET /rest/api/2/component/&#123;id&#125;` 获取模块详细信息</div></pre></td></tr></table></figure></li>
</ul>
<p>{<br>  “self”: “<a href="http://10.0.2.21:8080/rest/api/2/component/10001" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/component/10001</a>“,<br>  “id”: “10001”,<br>  “name”: “健康商城H5”,<br>  “lead”: {<br>    “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=yanlijun" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=yanlijun</a>“,<br>    “key”: “yanlijun”,<br>    “name”: “yanlijun”,<br>    “avatarUrls”: {<br>      “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10336</a>“,<br>      “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10336</a>“,<br>      “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10336</a>“,<br>      “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10336</a>“<br>    },<br>    “displayName”: “晏力军”,<br>    “active”: true<br>  },<br>  “assigneeType”: “COMPONENT_LEAD”,<br>  “assignee”: {<br>    “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=yanlijun" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=yanlijun</a>“,<br>    “key”: “yanlijun”,<br>    “name”: “yanlijun”,<br>    “avatarUrls”: {<br>      “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10336</a>“,<br>      “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10336</a>“,<br>      “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10336</a>“,<br>      “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10336</a>“<br>    },<br>    “displayName”: “晏力军”,<br>    “active”: true<br>  },<br>  “realAssigneeType”: “COMPONENT_LEAD”,<br>  “realAssignee”: {<br>    “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=yanlijun" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=yanlijun</a>“,<br>    “key”: “yanlijun”,<br>    “name”: “yanlijun”,<br>    “avatarUrls”: {<br>      “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10336</a>“,<br>      “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10336</a>“,<br>      “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10336</a>“,<br>      “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10336" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10336</a>“<br>    },<br>    “displayName”: “晏力军”,<br>    “active”: true<br>  },<br>  “isAssigneeTypeValid”: true,<br>  “project”: “APP”,<br>  “projectId”: 10004<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- `GET /rest/api/2/component/&#123;id&#125;/relatedIssueCounts` 获取模块问题数</div></pre></td></tr></table></figure></p>
<p>{<br>  “self”: “<a href="http://10.0.2.21:8080/rest/api/2/component/10001" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/component/10001</a>“,<br>  “issueCount”: 21<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- `GET /rest/api/2/issue/&#123;issueIdOrKey&#125;` 获取问题详细信息</div></pre></td></tr></table></figure></p>
<p><a href="http://10.0.2.21:8080/rest/api/2/issue/APP-5502" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/issue/APP-5502</a><br>{<br>  “expand”: “renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations”,<br>  “id”: “22587”,<br>  “self”: “<a href="http://10.0.2.21:8080/rest/api/2/issue/22587" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/issue/22587</a>“,<br>  “key”: “APP-5502”,<br>  “fields”: {<br>    “issuetype”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/issuetype/10005" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/issuetype/10005</a>“,<br>      “id”: “10005”,<br>      “description”: “jira.translation.issuetype.bug.name.desc”,<br>      “iconUrl”: “<a href="http://10.0.2.21:8080/secure/viewavatar?size=xsmall&amp;avatarId=10303&amp;avatarType=issuetype" target="_blank" rel="external">http://10.0.2.21:8080/secure/viewavatar?size=xsmall&amp;avatarId=10303&amp;avatarType=issuetype</a>“,<br>      “name”: “缺陷”,<br>      “subtask”: false,<br>      “avatarId”: 10303<br>    },<br>    “timespent”: null,<br>    “project”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/project/10004" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/project/10004</a>“,<br>      “id”: “10004”,<br>      “key”: “APP”,<br>      “name”: “健康猫App”,<br>      “avatarUrls”: {<br>        “48x48”: “<a href="http://10.0.2.21:8080/secure/projectavatar?pid=10004&amp;avatarId=10501" target="_blank" rel="external">http://10.0.2.21:8080/secure/projectavatar?pid=10004&amp;avatarId=10501</a>“,<br>        “24x24”: “<a href="http://10.0.2.21:8080/secure/projectavatar?size=small&amp;pid=10004&amp;avatarId=10501" target="_blank" rel="external">http://10.0.2.21:8080/secure/projectavatar?size=small&amp;pid=10004&amp;avatarId=10501</a>“,<br>        “16x16”: “<a href="http://10.0.2.21:8080/secure/projectavatar?size=xsmall&amp;pid=10004&amp;avatarId=10501" target="_blank" rel="external">http://10.0.2.21:8080/secure/projectavatar?size=xsmall&amp;pid=10004&amp;avatarId=10501</a>“,<br>        “32x32”: “<a href="http://10.0.2.21:8080/secure/projectavatar?size=medium&amp;pid=10004&amp;avatarId=10501" target="_blank" rel="external">http://10.0.2.21:8080/secure/projectavatar?size=medium&amp;pid=10004&amp;avatarId=10501</a>“<br>      }<br>    },<br>    “fixVersions”: [],<br>    “aggregatetimespent”: null,<br>    “resolution”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/resolution/10000" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/resolution/10000</a>“,<br>      “id”: “10000”,<br>      “description”: “该问题的工作流程已完成。”,<br>      “name”: “完成”<br>    },<br>    “customfield_10310”: “com.atlassian.servicedesk.plugins.approvals.internal.customfield.ApprovalsCFValue@648bb4ca”,<br>    “customfield_10311”: null,<br>    “customfield_10312”: null,<br>    “customfield_10700”: null,<br>    “customfield_10701”: null,<br>    “customfield_10702”: null,<br>    “customfield_10703”: null,<br>    “customfield_10704”: null,<br>    “resolutiondate”: “2017-12-01T17:45:19.000+0800”,<br>    “workratio”: -1,<br>    “lastViewed”: “2017-12-07T11:34:15.281+0800”,<br>    “watches”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/issue/APP-5502/watchers" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/issue/APP-5502/watchers</a>“,<br>      “watchCount”: 2,<br>      “isWatching”: true<br>    },<br>    “created”: “2017-09-22T20:01:26.000+0800”,<br>    “priority”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/priority/3" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/priority/3</a>“,<br>      “iconUrl”: “<a href="http://10.0.2.21:8080/images/icons/priorities/medium.svg" target="_blank" rel="external">http://10.0.2.21:8080/images/icons/priorities/medium.svg</a>“,<br>      “name”: “普通”,<br>      “id”: “3”<br>    },<br>    “customfield_10100”: null,<br>    “labels”: [],<br>    “customfield_10214”: null,<br>    “customfield_10413”: null,<br>    “timeestimate”: null,<br>    “aggregatetimeoriginalestimate”: null,<br>    “versions”: [],<br>    “issuelinks”: [],<br>    “assignee”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu</a>“,<br>      “name”: “qiushiyu”,<br>      “key”: “qiushiyu”,<br>      “emailAddress”: “qiusy@healthmall.cn”,<br>      “avatarUrls”: {<br>        “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>        “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>        “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>        “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“<br>      },<br>      “displayName”: “邱世余”,<br>      “active”: true,<br>      “timeZone”: “Asia/Shanghai”<br>    },<br>    “updated”: “2017-12-01T17:45:19.000+0800”,<br>    “status”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/status/10204" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/status/10204</a>“,<br>      “description”: “关闭缺陷”,<br>      “iconUrl”: “<a href="http://10.0.2.21:8080/images/icons/statuses/generic.png" target="_blank" rel="external">http://10.0.2.21:8080/images/icons/statuses/generic.png</a>“,<br>      “name”: “关闭缺陷”,<br>      “id”: “10204”,<br>      “statusCategory”: {<br>        “self”: “<a href="http://10.0.2.21:8080/rest/api/2/statuscategory/3" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/statuscategory/3</a>“,<br>        “id”: 3,<br>        “key”: “done”,<br>        “colorName”: “green”,<br>        “name”: “Done”<br>      }<br>    },<br>    “components”: [],<br>    “timeoriginalestimate”: null,<br>    “description”: “1.轮播管理，轮播列表，编辑轮播图时喵村帖子，喵村主页类型的喵村ID，帖子ID显示为空，新增时是有输入对应字段的！\r\n\r\n!image-2017-09-22-20-01-31-190.png!”,<br>    “customfield_10210”: null,<br>    “customfield_10211”: null,<br>    “customfield_10212”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/customFieldOption/10145" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/customFieldOption/10145</a>“,<br>      “value”: “严重”,<br>      “id”: “10145”<br>    },<br>    “customfield_10410”: null,<br>    “timetracking”: {},<br>    “customfield_10411”: null,<br>    “customfield_10005”: null,<br>    “customfield_10203”: null,<br>    “customfield_10401”: null,<br>    “customfield_10204”: null,<br>    “customfield_10402”: null,<br>    “customfield_10600”: null,<br>    “customfield_10007”: null,<br>    “customfield_10205”: null,<br>    “customfield_10403”: null,<br>    “customfield_10008”: null,<br>    “customfield_10404”: null,<br>    “customfield_10206”: [{<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=zhufengru" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=zhufengru</a>“,<br>      “name”: “zhufengru”,<br>      “key”: “zhufengru”,<br>      “emailAddress”: “zhufr@healthmall.cn”,<br>      “avatarUrls”: {<br>        “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10122</a>“,<br>        “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122</a>“,<br>        “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122</a>“,<br>        “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122</a>“<br>      },<br>      “displayName”: “朱丰茹”,<br>      “active”: true,<br>      “timeZone”: “Asia/Shanghai”<br>    }, {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu</a>“,<br>      “name”: “qiushiyu”,<br>      “key”: “qiushiyu”,<br>      “emailAddress”: “qiusy@healthmall.cn”,<br>      “avatarUrls”: {<br>        “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>        “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>        “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>        “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“<br>      },<br>      “displayName”: “邱世余”,<br>      “active”: true,<br>      “timeZone”: “Asia/Shanghai”<br>    }],<br>    “attachment”: [{<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/attachment/16901" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/attachment/16901</a>“,<br>      “id”: “16901”,<br>      “filename”: “image-2017-09-22-20-01-31-190.png”,<br>      “author”: {<br>        “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=zhufengru" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=zhufengru</a>“,<br>        “name”: “zhufengru”,<br>        “key”: “zhufengru”,<br>        “emailAddress”: “zhufr@healthmall.cn”,<br>        “avatarUrls”: {<br>          “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10122</a>“,<br>          “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122</a>“,<br>          “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122</a>“,<br>          “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122</a>“<br>        },<br>        “displayName”: “朱丰茹”,<br>        “active”: true,<br>        “timeZone”: “Asia/Shanghai”<br>      },<br>      “created”: “2017-09-22T20:01:12.000+0800”,<br>      “size”: 355358,<br>      “mimeType”: “text/plain”,<br>      “content”: “<a href="http://10.0.2.21:8080/secure/attachment/16901/image-2017-09-22-20-01-31-190.png" target="_blank" rel="external">http://10.0.2.21:8080/secure/attachment/16901/image-2017-09-22-20-01-31-190.png</a>“,<br>      “thumbnail”: “<a href="http://10.0.2.21:8080/secure/thumbnail/16901/_thumb_16901.png" target="_blank" rel="external">http://10.0.2.21:8080/secure/thumbnail/16901/_thumb_16901.png</a>“<br>    }],<br>    “customfield_10009”: null,<br>    “customfield_10207”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/customFieldOption/10100" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/customFieldOption/10100</a>“,<br>      “value”: “功能缺陷”,<br>      “id”: “10100”<br>    },<br>    “customfield_10405”: null,<br>    “aggregatetimeestimate”: null,<br>    “customfield_10208”: null,<br>    “customfield_10406”: null,<br>    “customfield_10209”: null,<br>    “customfield_10407”: null,<br>    “customfield_10408”: null,<br>    “customfield_10409”: null,<br>    “summary”: “【后台】#测试服#轮播管理，轮播列表，编辑页面字段值没有加载”,<br>    “creator”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=zhufengru" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=zhufengru</a>“,<br>      “name”: “zhufengru”,<br>      “key”: “zhufengru”,<br>      “emailAddress”: “zhufr@healthmall.cn”,<br>      “avatarUrls”: {<br>        “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10122</a>“,<br>        “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122</a>“,<br>        “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122</a>“,<br>        “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122</a>“<br>      },<br>      “displayName”: “朱丰茹”,<br>      “active”: true,<br>      “timeZone”: “Asia/Shanghai”<br>    },<br>    “subtasks”: [],<br>    “reporter”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=zhufengru" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=zhufengru</a>“,<br>      “name”: “zhufengru”,<br>      “key”: “zhufengru”,<br>      “emailAddress”: “zhufr@healthmall.cn”,<br>      “avatarUrls”: {<br>        “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?avatarId=10122</a>“,<br>        “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10122</a>“,<br>        “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10122</a>“,<br>        “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10122</a>“<br>      },<br>      “displayName”: “朱丰茹”,<br>      “active”: true,<br>      “timeZone”: “Asia/Shanghai”<br>    },<br>    “customfield_10241”: null,<br>    “customfield_10000”: “1|i01nsn:”,<br>    “aggregateprogress”: {<br>      “progress”: 0,<br>      “total”: 0<br>    },<br>    “customfield_10001”: null,<br>    “customfield_10243”: null,<br>    “customfield_10245”: null,<br>    “customfield_10400”: null,<br>    “customfield_10313”: null,<br>    “customfield_10314”: [],<br>    “environment”: null,<br>    “customfield_10315”: null,<br>    “customfield_10316”: null,<br>    “duedate”: null,<br>    “progress”: {<br>      “progress”: 0,<br>      “total”: 0<br>    },<br>    “comment”: {<br>      “comments”: [{<br>        “self”: “<a href="http://10.0.2.21:8080/rest/api/2/issue/22587/comment/15542" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/issue/22587/comment/15542</a>“,<br>        “id”: “15542”,<br>        “author”: {<br>          “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu</a>“,<br>          “name”: “qiushiyu”,<br>          “key”: “qiushiyu”,<br>          “emailAddress”: “qiusy@healthmall.cn”,<br>          “avatarUrls”: {<br>            “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>            “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>            “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>            “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“<br>          },<br>          “displayName”: “邱世余”,<br>          “active”: true,<br>          “timeZone”: “Asia/Shanghai”<br>        },<br>        “body”: “已解决”,<br>        “updateAuthor”: {<br>          “self”: “<a href="http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/user?username=qiushiyu</a>“,<br>          “name”: “qiushiyu”,<br>          “key”: “qiushiyu”,<br>          “emailAddress”: “qiusy@healthmall.cn”,<br>          “avatarUrls”: {<br>            “48x48”: “<a href="http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>            “24x24”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=small&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>            “16x16”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“,<br>            “32x32”: “<a href="http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901" target="_blank" rel="external">http://10.0.2.21:8080/secure/useravatar?size=medium&amp;ownerId=qiushiyu&amp;avatarId=12901</a>“<br>          },<br>          “displayName”: “邱世余”,<br>          “active”: true,<br>          “timeZone”: “Asia/Shanghai”<br>        },<br>        “created”: “2017-09-23T15:31:43.000+0800”,<br>        “updated”: “2017-09-23T15:31:43.000+0800”<br>      }],<br>      “maxResults”: 1,<br>      “total”: 1,<br>      “startAt”: 0<br>    },<br>    “votes”: {<br>      “self”: “<a href="http://10.0.2.21:8080/rest/api/2/issue/APP-5502/votes" target="_blank" rel="external">http://10.0.2.21:8080/rest/api/2/issue/APP-5502/votes</a>“,<br>      “votes”: 0,<br>      “hasVoted”: false<br>    },<br>    “worklog”: {<br>      “startAt”: 0,<br>      “maxResults”: 20,<br>      “total”: 0,<br>      “worklogs”: []<br>    }<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- `GET /rest/api/2/myself` 获取当前用户信息</div><div class="line"></div><div class="line">- `GET /rest/api/2/project` 获取项目信息</div><div class="line"></div><div class="line">paramter | type | description</div><div class="line">---- | ---- | ----</div><div class="line">expand | string | 额外参数定义期望返回的字段</div><div class="line">recent | int | 返回用户最近的项目</div><div class="line"></div><div class="line">- `GET /rest/api/2/project/&#123;projectId or Key&#125;` 获取项目信息详情</div><div class="line"></div><div class="line">- `GET /rest/api/2/project/IOT4LHOUSE/components` 获取项目的模块列表</div><div class="line"></div><div class="line">- `GET /rest/api/2/configuration` 如果启用或禁用Jira中的可选功能，则返回信息。 如果启用时间跟踪，则还会返回有关时间跟踪配置的详细信息。</div></pre></td></tr></table></figure></p>
<p>{<br>  “votingEnabled”: true,<br>  “watchingEnabled”: true,<br>  “unassignedIssuesAllowed”: true,<br>  “subTasksEnabled”: true,<br>  “issueLinkingEnabled”: true,<br>  “timeTrackingEnabled”: true,<br>  “attachmentsEnabled”: true,<br>  “timeTrackingConfiguration”: {<br>    “workingHoursPerDay”: 8.0,<br>    “workingDaysPerWeek”: 5.0,<br>    “timeFormat”: “pretty”,<br>    “defaultUnit”: “minute”<br>  }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- `GET /rest/api/2/application-properties` 获取app状态信息(需要权限)</div><div class="line"></div><div class="line">- Search ``` GET /rest/api/2/search</div></pre></td></tr></table></figure></p>
<p>使用JQL语句搜索JIRA里面的issue.<br><strong>Sorting</strong>: JQL参数是一个完整的能够包括ORDER BY语句的JQL表达式<br><strong>Field</strong>: 字段参数(可以多次指定)提供一个逗号分离的参数列表返回.这可以用来检索一个字段的子集,一个特定的字段可以通过用一个减号作为前缀来排除.<br>通常来说,只有navigable的字段会被返回, note:在get-issue资源中会默认返回所有的字段<br><em>all - 返回所有的字段
</em>navigable - 只包括navigable字段<br>summary, comment - 只包括详情和评论<br>-description - 包括除去了description的navigable字段<br><em>all -comment -包括除了评论的所有东西<br><em>*Properties</em></em>: 这个</p>
<ul>
<li><p>Get <code>GET /rest/api/2/serverInfo</code>获取jira服务器信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</li>
<li><p><code>GET /rest/api/2/status</code>获取所有issue状态配置</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/status/3"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"开发中"</span>,</div><div class="line">  <span class="attr">"iconUrl"</span>: <span class="string">"http://10.0.2.21:8080/images/icons/statuses/inprogress.png"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"开发中"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"3"</span>,</div><div class="line">  <span class="attr">"statusCategory"</span>: &#123;</div><div class="line">    <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/statuscategory/4"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">"key"</span>: <span class="string">"indeterminate"</span>,</div><div class="line">    <span class="attr">"colorName"</span>: <span class="string">"yellow"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"进行中"</span></div><div class="line">  &#125;</div><div class="line">&#125;, </div><div class="line">  .</div><div class="line">  .</div><div class="line">  .</div><div class="line">,&#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/status/10300"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"iconUrl"</span>: <span class="string">"http://10.0.2.21:8080/images/icons/statuses/generic.png"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"产品处理中"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"10300"</span>,</div><div class="line">  <span class="attr">"statusCategory"</span>: &#123;</div><div class="line">    <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/statuscategory/4"</span>,</div><div class="line">    <span class="attr">"id"</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">"key"</span>: <span class="string">"indeterminate"</span>,</div><div class="line">    <span class="attr">"colorName"</span>: <span class="string">"yellow"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"进行中"</span></div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure>
</li>
<li><p><code>GET /rest/api/2/statuscategory</code> 获取状态分类,与上一个对应</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/statuscategory/1"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"undefined"</span>,</div><div class="line">  <span class="attr">"colorName"</span>: <span class="string">"medium-gray"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"无分类"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/statuscategory/2"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"new"</span>,</div><div class="line">  <span class="attr">"colorName"</span>: <span class="string">"blue-gray"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"待办"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/statuscategory/4"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"indeterminate"</span>,</div><div class="line">  <span class="attr">"colorName"</span>: <span class="string">"yellow"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"进行中"</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/statuscategory/3"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"done"</span>,</div><div class="line">  <span class="attr">"colorName"</span>: <span class="string">"green"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"Done"</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure>
</li>
<li><p><code>GET /rest/api/2/user</code> 获取用户信息</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>parameter</th>
<th>type</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>username</td>
<td>string</td>
<td>用户名</td>
</tr>
<tr>
<td>key</td>
<td>string</td>
<td>用户key</td>
</tr>
</tbody>
</table>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"self"</span>: <span class="string">"http://10.0.2.21:8080/rest/api/2/user?username=liqiang"</span>,</div><div class="line">  <span class="attr">"key"</span>: <span class="string">"liqiang"</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"liqiang"</span>,</div><div class="line">  <span class="attr">"emailAddress"</span>: <span class="string">"liqiang@healthmall.cn"</span>,</div><div class="line">  <span class="attr">"avatarUrls"</span>: &#123;</div><div class="line">    <span class="attr">"48x48"</span>: <span class="string">"http://10.0.2.21:8080/secure/useravatar?avatarId=10346"</span>,</div><div class="line">    <span class="attr">"24x24"</span>: <span class="string">"http://10.0.2.21:8080/secure/useravatar?size=small&amp;avatarId=10346"</span>,</div><div class="line">    <span class="attr">"16x16"</span>: <span class="string">"http://10.0.2.21:8080/secure/useravatar?size=xsmall&amp;avatarId=10346"</span>,</div><div class="line">    <span class="attr">"32x32"</span>: <span class="string">"http://10.0.2.21:8080/secure/useravatar?size=medium&amp;avatarId=10346"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"displayName"</span>: <span class="string">"李强"</span>,</div><div class="line">  <span class="attr">"active"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"timeZone"</span>: <span class="string">"Asia/Shanghai"</span>,</div><div class="line">  <span class="attr">"locale"</span>: <span class="string">"zh_CN"</span>,</div><div class="line">  <span class="attr">"groups"</span>: &#123;</div><div class="line">    <span class="attr">"size"</span>: <span class="number">3</span>,</div><div class="line">    <span class="attr">"items"</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"applicationRoles"</span>: &#123;</div><div class="line">    <span class="attr">"size"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"items"</span>: []</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"expand"</span>: <span class="string">"groups,applicationRoles"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JIRA-REST-API-标注&quot;&gt;&lt;a href=&quot;#JIRA-REST-API-标注&quot; class=&quot;headerlink&quot; title=&quot;JIRA REST API 标注&quot;&gt;&lt;/a&gt;JIRA REST API 标注&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GET prem
    
    </summary>
    
    
      <category term="jira" scheme="https://qiil.github.io/qill.github.io/tags/jira/"/>
    
  </entry>
  
  <entry>
    <title>被墙了的已编译的资源(不定时更新)</title>
    <link href="https://qiil.github.io/qill.github.io/2017/11/17/%E8%A2%AB%E5%A2%99%E4%BA%86%E7%9A%84%E5%B7%B2%E7%BC%96%E8%AF%91%E7%9A%84%E8%B5%84%E6%BA%90/"/>
    <id>https://qiil.github.io/qill.github.io/2017/11/17/被墙了的已编译的资源/</id>
    <published>2017-11-17T13:22:35.000Z</published>
    <updated>2017-11-17T13:25:16.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="被墙了的已编译的资源包"><a href="#被墙了的已编译的资源包" class="headerlink" title="被墙了的已编译的资源包"></a>被墙了的已编译的资源包</h3><hr>
<p>可通过手动下载然后把已编译的资源包放到对应目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#包名</div><div class="line">npm images</div><div class="line">https://github.com/zhangyuanwei/node-images/releases/download/v3.0.1/linux-x64-57_binding.node</div></pre></td></tr></table></figure></p>
<p><a href="http://oqzgtjqen.bkt.clouddn.com/binding.node" target="_blank" rel="external">node v8.x, linux x64,images包</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;被墙了的已编译的资源包&quot;&gt;&lt;a href=&quot;#被墙了的已编译的资源包&quot; class=&quot;headerlink&quot; title=&quot;被墙了的已编译的资源包&quot;&gt;&lt;/a&gt;被墙了的已编译的资源包&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;可通过手动下载然后把已编译的资源包放到对应目录下&lt;br&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端帖子经历</title>
    <link href="https://qiil.github.io/qill.github.io/2017/11/17/%E5%89%8D%E7%AB%AF%E5%B8%96%E5%AD%90%E7%BB%8F%E5%8E%86/"/>
    <id>https://qiil.github.io/qill.github.io/2017/11/17/前端帖子经历/</id>
    <published>2017-11-17T13:22:05.000Z</published>
    <updated>2017-12-21T03:02:28.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html-css"><a href="#html-css" class="headerlink" title="html, css:"></a>html, css:</h3><ol>
<li><a href="http://www.w3school.com.cn/index.html" target="_blank" rel="external">w3school</a></li>
</ol>
<h3 id="webpack相关"><a href="#webpack相关" class="headerlink" title="webpack相关:"></a>webpack相关:</h3><ol>
<li><a href="https://segmentfault.com/a/1190000006178770" target="_blank" rel="external">入门 Webpack，看这篇就够了</a></li>
</ol>
<h3 id="react"><a href="#react" class="headerlink" title="react:"></a>react:</h3><ol>
<li><a href="https://doc.react-china.org/tutorial/tutorial.html" target="_blank" rel="external">react-china入门教程</a></li>
<li><a href="https://doc.react-china.org/docs/hello-world.html" target="_blank" rel="external">react-china中文文档</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">阮一峰react入门实例教程</a></li>
</ol>
<h3 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h3><ol>
<li><a href="http://www.cnblogs.com/dolphinX/p/3391351.html" target="_blank" rel="external">跨站脚本攻击XSS</a></li>
<li><a href="http://www.cnblogs.com/dsky/archive/2012/04/06/2434768.html" target="_blank" rel="external">XSS跨站测试代码大全</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;html-css&quot;&gt;&lt;a href=&quot;#html-css&quot; class=&quot;headerlink&quot; title=&quot;html, css:&quot;&gt;&lt;/a&gt;html, css:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3school.com.cn/
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>jenkins部署检测gitlab仓库自动构建WIKI</title>
    <link href="https://qiil.github.io/qill.github.io/2017/10/24/jenkins%E9%83%A8%E7%BD%B2%E6%A3%80%E6%B5%8Bgitlab%E4%BB%93%E5%BA%93%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAWIKI/"/>
    <id>https://qiil.github.io/qill.github.io/2017/10/24/jenkins部署检测gitlab仓库自动构建WIKI/</id>
    <published>2017-10-24T06:17:18.000Z</published>
    <updated>2017-10-24T06:22:21.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jenkins部署流程"><a href="#Jenkins部署流程" class="headerlink" title="Jenkins部署流程:"></a>Jenkins部署流程:</h3><p><img src="http://oqzgtjqen.bkt.clouddn.com/Jenkin%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8Bwhite.png" alt=""></p>
<hr>
<h3 id="Jenkins自动部署好处"><a href="#Jenkins自动部署好处" class="headerlink" title="Jenkins自动部署好处:"></a>Jenkins自动部署好处:</h3><ol>
<li>开发者只需要关注开发,并且把代码合并到Git上即可.由代码仓库管理员审核代码后,合并到指定分支,即可部署到相关的服务器上.</li>
<li>一切代码都由git仓库存储,可随时回滚代码,并且追述问题来源.(svn在不同的操作系统下会出现提交被覆盖的情况)</li>
<li>部署任务执行成功后可以邮件通知相关开发人员与部署人员.</li>
<li>若是遇到多任务按顺序部署可以通过配置相关部署顺序保证部署严格按照程序执行</li>
</ol>
<h3 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h3><blockquote>
<ul>
<li>ubuntu: jenkins服务器, (如果用windows作为jenkins服务器的话建议换掉,因为或许会有很多不知道的坑)</li>
<li>centos: 目标服务器</li>
</ul>
</blockquote>
<h3 id="插件准备"><a href="#插件准备" class="headerlink" title="插件准备"></a>插件准备</h3><blockquote>
<ul>
<li>Git Plugin</li>
<li>GitLab Plugin</li>
<li>Git client Plugin</li>
<li>Gitlab Hook Plugin</li>
<li>Publish Over SSH</li>
<li>SSH plugin<br>没记错应该就是这么多,如果是用docker部署jenkins的话一开始会推荐一些可安装的插件,把他们都安装上了然后再装上上面的插件就肯定差不多了.</li>
</ul>
</blockquote>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p><strong>路径:主页-&gt;设置-&gt;系统设置</strong></p>
<ul>
<li><strong>SSH remote host设置(用于在远端执行shell命令,可有可无):</strong><ul>
<li><strong>Hostname: 远端主机ip</strong></li>
<li><strong>Port: ssh端口一般为22</strong></li>
<li><strong>Credentails: 远端主机的用户</strong></li>
<li><strong>Pty: 不知道有什么用(勾选)</strong></li>
<li><strong>serverAlivelnterval: 忘记了是什么,提示是写0为默认</strong></li>
<li><strong>timeout: 连接超时设置: 0为默认</strong><br><strong>主要配置如图(未添加账号):</strong></li>
</ul>
</li>
</ul>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/ssh-remote-host%E9%85%8D%E7%BD%AE.jpg" alt="配置远端的主机ssh"></p>
<ul>
<li><strong>添加账号:</strong><ul>
<li><strong>用户名:此处为远端主机用户</strong></li>
<li><strong>密码: 同上</strong></li>
</ul>
</li>
</ul>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E8%B4%A6%E6%88%B7%E6%B7%BB%E5%8A%A0.jpg" alt="jenkins账号添加"><br>最后点击 check connection看看是否连接成功.</p>
<ul>
<li><strong>Publish over SSH设置(用于发送文件到远端并且通过ssh连接远端并且在远端执行对应命令):</strong><ul>
<li><strong>Passpharse: 提取私钥密码(可以为空具体要看生成ssh key时具体输入了什么)</strong></li>
<li><strong>Path to key: 私钥路径（优先级低）</strong></li>
<li><strong>Key: 私钥(优先级高), 私钥和私钥路径只需要配置一个,若是同时配置则按优先级读取.</strong></li>
<li><strong>SSH SERVERS:服务器配置</strong></li>
<li><strong>Name: 服务器名(对应服务器名,可以随便起用于jenkins内部识别)</strong></li>
<li><strong>Hostname: 服务器IP</strong></li>
<li><strong>Username: 服务器用户名</strong></li>
<li><strong>远端工作目录(*注意):　这必须为服务器上一个真实存在的目录</strong></li>
</ul>
</li>
</ul>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/publish-over-ssh%E6%89%80%E6%9C%89%E9%85%8D%E7%BD%AE.jpg" alt=""></p>
<h3 id="Job的配置"><a href="#Job的配置" class="headerlink" title="Job的配置"></a>Job的配置</h3><ul>
<li><strong>新建一个自由风格的job:</strong></li>
</ul>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%96%B0%E5%BB%BAjob.jpg" alt=""></p>
<ul>
<li><strong>源码管理仓库为git(对应配置):</strong><ul>
<li><strong>Repository URL: 仓库url</strong></li>
<li><strong>Credentials: 仓库用户添加用户上面曾经添加过,同之前步骤再添加一个账号:需要注意的是username需要为gitlab的用户名,密码为gitlab登录密码.</strong></li>
<li><strong>Branch Specifier 监控的分支只有该分支改动后才会触发对应的钩子(钩子配置稍后详解)</strong></li>
<li><strong>Repository browser:设置为自动就行了.</strong></li>
</ul>
</li>
</ul>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE.jpg" alt=""></p>
<ul>
<li><p><strong>构建触发器与gitlab webhook配置</strong>:</p>
<ul>
<li><strong>选择这个构建触发器,若是没有看到估计就是插件装少了</strong></li>
<li><strong>其次就是gitlab的webhook配置了,进入gitlab项目选择设置中的webhook配置(具体看图)</strong></li>
<li><strong>讲构建触发器上面的url和secret key分别复制到gitlab webhook的配置里面,然后添加,添加后点击测试出现http 200则为成功(出现404与403请移步坑记录)</strong><br><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-gitlab-webhook.jpg" alt="gitlab webhook"><br><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-gitlab-webhook%E9%85%8D%E7%BD%AE.jpg" alt="gitlab webhook配置"><br><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8%E9%85%8D%E7%BD%AE.jpg" alt="jenkins构建触发器配置"></li>
</ul>
</li>
<li><p><strong>构建配置</strong></p>
<ul>
<li><strong>选择发送文件并且通过ssh运行命令</strong></li>
<li><strong>SSH Server为之前已经配置过的服务器名</strong></li>
<li><strong>Source file为要发送的文件,支持正则,具体可点击右边小问号.我这里默认全部类型的文件</strong></li>
<li><strong>Remove prefix需要过滤的文件</strong></li>
<li><strong>Remote direcroty发送文件到远端一个目的文件夹(基于publish配置的远端文件夹下的文件夹若文件夹不存在则会被创建)</strong></li>
<li><strong>通过ssh向远端发送的命令,我这里是在远端写了一个脚本然后运行远端的脚本来发布</strong></li>
</ul>
</li>
</ul>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE.jpg" alt="构建配置"></p>
<p><strong>终于大功告成了!!!!保存配置然后构建!!!</strong><br><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%9E%84%E5%BB%BA%E5%A4%B1%E8%B4%A5%E4%BE%8B%E5%AD%90.jpg" alt=""><br>我当时心情就是这样子:<br><img src="http://oqzgtjqen.bkt.clouddn.com/%E6%9A%B4%E8%B5%B0%E5%B4%A9%E6%BA%83.png" alt=""></p>
<h3 id="最后问题肯定是解决了-要看请移步↓"><a href="#最后问题肯定是解决了-要看请移步↓" class="headerlink" title="最后问题肯定是解决了, 要看请移步↓"></a><strong>最后问题肯定是解决了, 要看请移步↓</strong></h3><h3 id="相关坑和对抗坑的记录"><a href="#相关坑和对抗坑的记录" class="headerlink" title="相关坑和对抗坑的记录"></a>相关坑和对抗坑的记录</h3><ol>
<li><p>关于 SSH私钥，请用ssh-keygen -t rsa生成, windows下的putty等生成ssh key的工具请不要用!因为生成的私钥格式不一样.</p>
</li>
<li><p>windows下关于git的配置需要到: <strong>设置(Manage Jenkins)-&gt;全局工具配置(Global Tool Configuration)-&gt;下配置git可执行文件的目录:Path to Git executable:</strong>*<em>\bin\git.exe*</em>.linux下不用管这个.<br><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-git-%E5%85%A8%E5%B1%80%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE.jpg" alt=""></p>
</li>
<li><p>仓库链接不上:　用ssh连接的仓库是不可以连接的需要用ssh连接</p>
</li>
<li>关于jenkins用户添加:用户设置需要与对应的配置需要的账户密码一致.例如ssh需要远端服务器的账户密码,和gitlab仓库的账户的密码需要是gitlab的用户名与密码</li>
<li>windows请远离,拥抱shell</li>
<li>SSH发送命令提示命令不存在.一开始我以为是服务器上没有这个命令,我立马上服务器确认了这个命令存在后我就认为不是这并不是服务器的问题.然后我发现SSH执行脚本中cd的命令是可以执行的,然后我再尝试了其他的shell命令mkdir等也是可以执行的但是偏偏pm2的启动命令不可以执行(MMP).从网上搜索了一堆之后,我发现jenkins若是通过ssh发送命令到远端的服务器上时,需要该命令在jenkins服务器上的/usr/bin里面也要存在.一查我发现pm2这个命令的确不存在.我尝试了另一个存在的命令: mongo:</li>
</ol>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%9E%84%E5%BB%BA%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%E6%88%90%E5%8A%9F%E4%BE%8B%E5%AD%90.jpg" alt="命令能够成功运行！"><br>命令是能够成功运行的！那就对了，我只要把pm2命令配置到 /usr/bin/里面就可以了.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先找出要运行的命令:</span></div><div class="line"><span class="built_in">which</span> sails</div><div class="line"><span class="comment"># 把命令的快捷方式添加到/usr/bin</span></div><div class="line">ln -s 上面sails的命令目录 /usr/bin/sails</div></pre></td></tr></table></figure></p>
<p>修改脚本后再次构建:<br><img src="http://oqzgtjqen.bkt.clouddn.com/jenkins-%E6%9E%84%E5%BB%BA%E8%93%9D%E8%89%B2%E6%88%90%E5%8A%9F%E4%BE%8B%E5%AD%90.jpg" alt=""></p>
<center><strong>大功告成!!</strong></center><br><center><img src="http://oqzgtjqen.bkt.clouddn.com/%E6%9A%B4%E8%B5%B0%E5%98%9A%E7%91%9F.png" alt=""></center><br><center>完</center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Jenkins部署流程&quot;&gt;&lt;a href=&quot;#Jenkins部署流程&quot; class=&quot;headerlink&quot; title=&quot;Jenkins部署流程:&quot;&gt;&lt;/a&gt;Jenkins部署流程:&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oqzgtjqen.bkt.c
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="jenkins" scheme="https://qiil.github.io/qill.github.io/tags/jenkins/"/>
    
      <category term="gitlab" scheme="https://qiil.github.io/qill.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>docker部署postgres备忘</title>
    <link href="https://qiil.github.io/qill.github.io/2017/10/24/docker%E9%83%A8%E7%BD%B2postgres%E5%A4%87%E5%BF%98/"/>
    <id>https://qiil.github.io/qill.github.io/2017/10/24/docker部署postgres备忘/</id>
    <published>2017-10-24T05:42:15.000Z</published>
    <updated>2017-10-24T05:44:06.972Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker pull postgres</div><div class="line">docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>postgres的用户机制需要postgres数据库中有一个用户，并且在Linux中有一个同名用户并拥有postgres安装目录的拥有者权限才能够用用特定的用户去连接postgres数据库。<br>docker镜像会默认开放5432端口所以标准的容器链接是可以连上去的，docker官方pg给了一个默认的数据库名和用户名为initdb，如果需要自定义用户名则需要另外配置</li>
</ul>
</blockquote>
<p>配置自定义用户名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ docker <span class="built_in">exec</span> -it containerid /bin/bash</div><div class="line">$ adduser <span class="built_in">test</span>  // 然后设置linux用户密码</div><div class="line">$ psql</div><div class="line">$ CREATE USER <span class="built_in">test</span> WITH PASSWORD <span class="string">'输入数据库用户密码'</span>;   <span class="comment">#注意数据库用户名与linux用户名需要同名</span></div><div class="line">$ ALTER USER <span class="built_in">test</span> WITH SUPERUSER; <span class="comment">#为用户赋权限，我为了方便直接给超级用户权限了</span></div><div class="line">$ \q  <span class="comment">#退出psql</span></div><div class="line">$ chown -R <span class="built_in">test</span> postgres数据库的安装目录</div><div class="line"><span class="comment">#postgres安装目录可以在 postgres.conf文件中看到 data_directory： /文件目录</span></div><div class="line"><span class="comment">#docker 一般默认进入的目录就是安装目录</span></div><div class="line">$ <span class="built_in">exit</span></div><div class="line">$ docker restart container id  <span class="comment">#重启容器就可以链接了</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
    
    </summary>
    
      <category term="linux琐碎事" scheme="https://qiil.github.io/qill.github.io/categories/linux%E7%90%90%E7%A2%8E%E4%BA%8B/"/>
    
    
      <category term="docker" scheme="https://qiil.github.io/qill.github.io/tags/docker/"/>
    
      <category term="postgresql" scheme="https://qiil.github.io/qill.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>js合并MP3文件</title>
    <link href="https://qiil.github.io/qill.github.io/2017/10/15/js%E5%90%88%E5%B9%B6MP3%E6%96%87%E4%BB%B6/"/>
    <id>https://qiil.github.io/qill.github.io/2017/10/15/js合并MP3文件/</id>
    <published>2017-10-15T14:31:30.000Z</published>
    <updated>2017-10-15T14:33:13.311Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg 合并MP3音频</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -i <span class="string">"concat:input1.mp3|input2.mp3|input3.mp3|..."</span> -acodec copy output.mp3</div></pre></td></tr></table></figure>
<p>js 调用shell命令进行合并<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cp <span class="keyword">from</span> <span class="string">'child_process'</span></div><div class="line"><span class="keyword">const</span> mergeAudio = (audio1, audio2, output=<span class="string">''</span>) = &gt; &#123;</div><div class="line">	cp.exec(<span class="string">`cd<span class="subst">$&#123;__dirname&#125;</span> &amp;&amp; ffmpeg -i "concat:<span class="subst">$&#123;audio1&#125;</span>|<span class="subst">$&#123;audio2&#125;</span>" -acodec copy <span class="subst">$&#123;output&#125;</span>`</span>, err =&gt; &#123;</div><div class="line">		<span class="keyword">if</span> (err) <span class="keyword">return</span> reject (err)</div><div class="line">		<span class="built_in">console</span>.log(output)</div><div class="line">		<span class="keyword">return</span> resolve(output)</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="comment">// 当前文件夹有1.mp3与2.mp3文件, 输出文件为music.mp3</span></div><div class="line">	mergeAudio(<span class="string">"1.mp3"</span>, <span class="string">"2.mp3"</span>, <span class="string">"music.mp3"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">	<span class="built_in">console</span>.log(err.message)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ffmpeg 合并MP3音频&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="mp3" scheme="https://qiil.github.io/qill.github.io/tags/mp3/"/>
    
      <category term="js" scheme="https://qiil.github.io/qill.github.io/tags/js/"/>
    
      <category term="ffmpeg" scheme="https://qiil.github.io/qill.github.io/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>sequelize中sql拼接单引号与绑定变量问题</title>
    <link href="https://qiil.github.io/qill.github.io/2017/09/19/sequelize%E4%B8%ADsql%E6%8B%BC%E6%8E%A5%E5%8D%95%E5%BC%95%E5%8F%B7%E4%B8%8E%E7%BB%91%E5%AE%9A%E5%8F%98%E9%87%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://qiil.github.io/qill.github.io/2017/09/19/sequelize中sql拼接单引号与绑定变量问题/</id>
    <published>2017-09-19T15:38:21.000Z</published>
    <updated>2017-09-19T15:44:39.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="select-query关于字符串绑定一个问题"><a href="#select-query关于字符串绑定一个问题" class="headerlink" title="select query关于字符串绑定一个问题"></a>select query关于字符串绑定一个问题</h2><p>当你在拼接SQL的时候存在一种情况数据库为：PostgreSql<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sequelize.query(</div><div class="line">	&#123;</div><div class="line">		<span class="attr">query</span>: <span class="string">"SELECT * FROM X WHERE ajsonb obj @&gt; '[$num]'::jsonb"</span>,</div><div class="line">		<span class="attr">bind</span>: &#123;<span class="attr">num</span>: <span class="number">1</span>&#125;</div><div class="line">	&#125;,</div><div class="line">	&#123; <span class="attr">type</span>: sequelize.QueryTypes.SELECT &#125;</div><div class="line">)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</div><div class="line">	<span class="comment">// *******</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在这个情况下，你会得到这样一个错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123; SequelizeBaseError: invalid input syntax <span class="keyword">for</span> <span class="built_in">type</span> json</div><div class="line">    ***</div><div class="line">  name: <span class="string">'SequelizeDatabaseError'</span>,</div><div class="line">  message: <span class="string">'invalid input syntax for type json'</span>,</div><div class="line">  parent:</div><div class="line">   &#123; error: invalid input syntax <span class="keyword">for</span> <span class="built_in">type</span> json</div><div class="line">   	***</div><div class="line">     name: <span class="string">'error'</span>,</div><div class="line">     length: 145,</div><div class="line">     severity: <span class="string">'ERROR'</span>,</div><div class="line">     code: <span class="string">'22P02'</span>,</div><div class="line">     detail: <span class="string">'Token "$" is invalid.'</span>,</div><div class="line">     hint: undefined,</div><div class="line">     position: <span class="string">'1086'</span>,</div><div class="line">     internalPosition: undefined,</div><div class="line">     internalQuery: undefined,</div><div class="line">     <span class="built_in">where</span>: <span class="string">'JSON data, line 1: $...'</span>,</div><div class="line">     schema: undefined,</div><div class="line">     table: undefined,</div><div class="line">     column: undefined,</div><div class="line">     dataType: undefined,</div><div class="line">     constraint: undefined,</div><div class="line">     file: <span class="string">'json.c'</span>,</div><div class="line">     line: <span class="string">'1229'</span>,</div></pre></td></tr></table></figure></p>
<p>关键在于 WHRE jsonb_obj @&gt; <strong>‘[$num]’:: jsonb</strong>这个位置，若是在SQL中存在单引号，sequelize会禁止你在“字符串”里面绑定添加绑定值。</p>
<p>有人会想到，为什么不用 IN 的方法代替包含运算符呢？包含符号与IN符号还是存在区别的，包含符号判断的是在给出的对象里是否有对应的值，或者元素，IN符号是对应的元素，是否存在于给定的数组，如果需要给定的数组是动态的，那么我们不能确定数组的情况下需要用到包含运算符了。</p>
<p>那么如何解决呢，<strong>解决的方法就是想方法吧sql中的“ ‘ ”去掉，因为PG的::json与::jsonb方法可以把一串字符串强行转换成json/jsonb格式，那么我们只要吧’[$num]’这一个整体变成字符串就行了所以上面的代码可以转换成</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sequelize.query(</div><div class="line">	&#123;</div><div class="line">		<span class="attr">query</span>: <span class="string">"SELECT * FROM X WHERE ajsonb obj @&gt; $num::jsonb"</span>,</div><div class="line">		<span class="attr">bind</span>: &#123;<span class="attr">num</span>: <span class="string">'[1]'</span>&#125;</div><div class="line">	&#125;,</div><div class="line">	&#123; <span class="attr">type</span>: sequelize.QueryTypes.SELECT &#125;</div><div class="line">)</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">row</span>) </span>&#123;</div><div class="line">	<span class="comment">// *******</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在这里面，num是一个字符串，sql中的单引号也已经去掉了，那么sequelize就可以成功解析，并且用上包含功能了。</p>
<center>完</center>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;select-query关于字符串绑定一个问题&quot;&gt;&lt;a href=&quot;#select-query关于字符串绑定一个问题&quot; class=&quot;headerlink&quot; title=&quot;select query关于字符串绑定一个问题&quot;&gt;&lt;/a&gt;select query关于字符串
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="postgresql" scheme="https://qiil.github.io/qill.github.io/tags/postgresql/"/>
    
      <category term="sequelize" scheme="https://qiil.github.io/qill.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>mongodb shell执行js脚本</title>
    <link href="https://qiil.github.io/qill.github.io/2017/08/30/mongodb-shell%E6%89%A7%E8%A1%8Cjs%E8%84%9A%E6%9C%AC/"/>
    <id>https://qiil.github.io/qill.github.io/2017/08/30/mongodb-shell执行js脚本/</id>
    <published>2017-08-29T16:22:36.000Z</published>
    <updated>2017-08-29T16:39:29.418Z</updated>
    
    <content type="html"><![CDATA[<p>mongo又一个优势就是-它是用js管理数据库的，所以我们能用js脚本来对mongodb进行更复杂的管理，比如我们对一些数据进行统计计算等。</p>
<h3 id="实用js脚本进行交互的有点和缺点"><a href="#实用js脚本进行交互的有点和缺点" class="headerlink" title="实用js脚本进行交互的有点和缺点"></a>实用js脚本进行交互的有点和缺点</h3><ol>
<li>无需任何驱动或者语言支持；</li>
<li>方便cron管理员定时任务；</li>
<li>数据格式问题，还有数据处理不慎会导致数据丢失</li>
</ol>
<h3 id="js脚本可用于以下任务"><a href="#js脚本可用于以下任务" class="headerlink" title="js脚本可用于以下任务"></a>js脚本可用于以下任务</h3><ol>
<li>备份；</li>
<li>简单修改数据库数据；</li>
<li>调度map-reduce命令（抄的，我没试过）；</li>
<li>离线报告与离线任务；</li>
<li>管理员的定时任务；</li>
</ol>
<h3 id="首先运行方式："><a href="#首先运行方式：" class="headerlink" title="首先运行方式："></a>首先运行方式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$mongo</span> 127.0.0.1:27017/<span class="built_in">test</span> -quiet test.js</div></pre></td></tr></table></figure>
<p>mongo: mongo客户端<br>127.0.0.1: 服务器ip地址<br>:27017: 服务器端口<br>/test: 数据库名<br>-quiet: 省略一些头信息<br>test.js: 要运行的脚本</p>
<h3 id="其他的一些说明"><a href="#其他的一些说明" class="headerlink" title="其他的一些说明"></a>其他的一些说明</h3><ol>
<li>通常使用两种方法打印获取到的结果：<br>print() =&gt; 普通js<br>printjson() =&gt; 格式化json打印，打印出来的格式会漂亮许多</li>
<li>迭代器（iterator command）在脚本操作中将失效</li>
<li>如何知道insert、delete、update等操作是否成功呢，请使用：<br>db.getLastErrorObj()<br>或者<br>db.getLastError()</li>
<li>js shell的相关介绍见：<br><a href="https://developer.mozilla.org/En/SpiderMonkey/Introduction_to_the_JavaScript_shell" target="_blank" rel="external">https://developer.mozilla.org/En/SpiderMonkey/Introduction_to_the_JavaScript_shell</a></li>
</ol>
<p>以下为一点点示例，需要注意的是千万要注意异步问题，和数据校验的问题，毕竟数据无价：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">db.userreports.find().forEach(<span class="function"><span class="keyword">function</span> (<span class="params">report</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> assessment = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> id = report._id</div><div class="line">	<span class="keyword">var</span> assessment_point = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> key_point = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> o_point = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> sum_point = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; report.key_assessment.length; i++) &#123;</div><div class="line">		key_point += report.key_assessment[i].self_score * <span class="number">0.1</span> +</div><div class="line">			report.key_assessment[i].superior_score * <span class="number">0.9</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	key_point *= <span class="number">0.7</span>;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; report.object_assessment.length; j++) &#123;</div><div class="line">		o_point += report.object_assessment[j].self_score * <span class="number">0.1</span> +</div><div class="line">			report.object_assessment[j].superior_score * <span class="number">0.9</span>;</div><div class="line">	&#125;</div><div class="line">	o_point *= <span class="number">0.2</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; report.summary_assessment.length; j++) &#123;</div><div class="line">		sum_point += report.summary_assessment[j].self_score * <span class="number">0.1</span> +</div><div class="line">			report.summary_assessment[j].superior_score * <span class="number">0.9</span>;</div><div class="line">	&#125;</div><div class="line">	sum_point *= <span class="number">0.1</span>;</div><div class="line">	assessment_point = key_point + o_point + sum_point;</div><div class="line">	<span class="keyword">if</span> (assessment_point != <span class="literal">NaN</span>)&#123;</div><div class="line">		report.assessment_point = <span class="built_in">Number</span>(assessment_point.toFixed(<span class="number">1</span>));</div><div class="line">		db.userreports.save(report);</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mongo又一个优势就是-它是用js管理数据库的，所以我们能用js脚本来对mongodb进行更复杂的管理，比如我们对一些数据进行统计计算等。&lt;/p&gt;
&lt;h3 id=&quot;实用js脚本进行交互的有点和缺点&quot;&gt;&lt;a href=&quot;#实用js脚本进行交互的有点和缺点&quot; class=&quot;h
    
    </summary>
    
      <category term="mongodb" scheme="https://qiil.github.io/qill.github.io/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="https://qiil.github.io/qill.github.io/tags/mongodb/"/>
    
      <category term="node.js" scheme="https://qiil.github.io/qill.github.io/tags/node-js/"/>
    
      <category term="script" scheme="https://qiil.github.io/qill.github.io/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>谢谢你，明哥！</title>
    <link href="https://qiil.github.io/qill.github.io/2017/08/29/%E8%B0%A2%E8%B0%A2%E4%BD%A0%EF%BC%8C%E6%98%8E%E5%93%A5%EF%BC%81/"/>
    <id>https://qiil.github.io/qill.github.io/2017/08/29/谢谢你，明哥！/</id>
    <published>2017-08-29T15:52:33.000Z</published>
    <updated>2017-08-29T16:19:18.682Z</updated>
    
    <content type="html"><![CDATA[<p>其实，我想写这个很久了。最近一直在加班状态，加上回到宿舍就不太想动了。但是每当我在园区走回公司时，每看到这张凳子，还是不仅会想到你对我的启发。</p>
<p>虽然只有短短的两周的接触，但是明哥你对我的影响无疑是深远的。我从你身上懂得了当事情很多的时候，就把事情都列出来，然后一点一点慢慢做处事方式。我现在也渐渐地去思考，我自己的工作是为了什么，自己的代码所干的事情是什么，为什么要这么干。也渐渐明白了你说的一天代码不及交流一下的感触了。最最重要的是，我拥有了你这个朋友，一个愿意把一个如此菜逼的我手把手教学两周的朋友。</p>
<p>刚开始工作的第一周，我深知自己的技术水平真的是非常一般，无论是node、数据库等的知识还停留在幼儿园阶段，我自己也明白这都是我大学荒废时间的后果。但是开始工作的头两周真的是你改变了我。现在，我慢慢可以独立开发了，我的同事也都很友好而且，xj也非常有耐心。我能够独立负责好一个简单的项目了，而且也参与到公司的项目中去了。虽然最近加班很累，但我深刻地感觉到我每天都在一点一滴地进步着（随着踩下一个又一个的坑）哈哈。</p>
<p>我舍友觉得我最近的加班好没有人性，虽然我也是这么觉得的，但是我觉得着也是锻炼我抗压的好机会呀。我会在将来的某个阶段离开这里，但离开的时候我一定要在公司被人认同，这也是你和我说的要有始有终。</p>
<p>在实习阶段的我，现在还有很多东西要学呢。无论是技术还是为人处世，最近我也感受到在职场的一些不适合的言论了，幸好xj人很nice，每一次都会提醒我。或许是我一直随性习惯了吧，有些行为还是不太好改，但是我会努力的。</p>
<p>恩还是这个凳子，这是你要离开的前一天我们在这里坐了一会儿，你和我谈互联网与人生规划，我和你谈人生理想。我知道了你是一个“不太幸运的人”，以前也错失了很多机会，但是我在这里也想祝福一下你，希望你以后能够工作顺利。以后或许我还能和你共事呢哈哈。或许之后你会是我的员工也未必噢！</p>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/%E6%98%8E%E5%93%A5.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实，我想写这个很久了。最近一直在加班状态，加上回到宿舍就不太想动了。但是每当我在园区走回公司时，每看到这张凳子，还是不仅会想到你对我的启发。&lt;/p&gt;
&lt;p&gt;虽然只有短短的两周的接触，但是明哥你对我的影响无疑是深远的。我从你身上懂得了当事情很多的时候，就把事情都列出来，然后
    
    </summary>
    
      <category term="人生观感" scheme="https://qiil.github.io/qill.github.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%82%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>实习半个月的感觉</title>
    <link href="https://qiil.github.io/qill.github.io/2017/08/09/%E5%AE%9E%E4%B9%A0%E5%8D%8A%E4%B8%AA%E6%9C%88%E7%9A%84%E6%84%9F%E8%A7%89/"/>
    <id>https://qiil.github.io/qill.github.io/2017/08/09/实习半个月的感觉/</id>
    <published>2017-08-09T15:59:43.000Z</published>
    <updated>2017-08-09T16:28:28.778Z</updated>
    
    <content type="html"><![CDATA[<p>今晚终于能够初步了解Vue的入门知识了，之前看Vue这个东西不知道怎么的就是看得很头晕，但内心明明知道Vue的前端知识应该很好学才对的呀，真是奇了怪了，现在终于是看懂了，可算是扬眉吐气了。</p>
<p>实习半个月来，我已经看完了sails.js的大部分文档、懂得了什么是RESTful、什么是前后端分离、见识了Waterline的ORM、领略了controller、service、config、police的分层开发模式、接手了明哥留给我的KPI系统、看完了C后台的所有内容。看上去其实很多东西，但是我意识到我的时间还是很少。因为，我的毕设还没动手，我还不懂ES6的代码规范，我需要学会egg.js的框架知识以用于之后新版的C后台的开发，我需要首席async，promise等控制异步的模块，现在我自己的node知识只能说是半桶水，有很多原理我自己还是不清楚，我还需要快速地熟练mongodb的操作。</p>
<p>或许这些可以慢慢来，但是在这互联网的时代，我自己深刻地意识到自己的压力，我或许想要发展成一个node工程师，然后再学习技术然后发展成一个数据处理或者数据挖掘清晰的python工程师，然后平时可以干干“坏事”。或许我是一个比较幸运的人，我一路走来，还有之后的路我都看到了困难与机会，我需要时刻给自己充电。</p>
<p>但是这一周，过了三天了，每天从公司回来我都觉得很困，很累呀，真是蛋疼。在公司里面坐着的那张椅子是软垫的，坐得我的腰很辛苦，我都一度以为我的身体开始发虚了，难道真的是撸多了？今天晚上怒跑了华师一圈加上运动厂两圈，然后脖子终于舒服一点了。但是坐久了，腰还是一样，看来要加快健身的日程了。</p>
<p>昨天和肥航逛了一个晚上，我发现了他对工作有点逃避，其实我似乎对新的东西也有着很多的逃避心里，就像现在的实习，我还不是因为我堂哥有个推荐我的机会我才会来面试的嘛，不然我肯定会拖很久才去实习的，不过在实习的时候我也很幸运，也学到了很多，怎么说呢，我现在的感觉就是一天真的事太短了点，现在已经是00.25分了，写道这里已经用了25分钟，在之前我还答应了猪猪，我写完这个，然后去睡觉的，但是一直停不了笔，真是蛋疼。</p>
<p>后面还有挑战，继续加油吧！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今晚终于能够初步了解Vue的入门知识了，之前看Vue这个东西不知道怎么的就是看得很头晕，但内心明明知道Vue的前端知识应该很好学才对的呀，真是奇了怪了，现在终于是看懂了，可算是扬眉吐气了。&lt;/p&gt;
&lt;p&gt;实习半个月来，我已经看完了sails.js的大部分文档、懂得了什么是R
    
    </summary>
    
      <category term="人生观感" scheme="https://qiil.github.io/qill.github.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%82%E6%84%9F/"/>
    
    
      <category term="feeling" scheme="https://qiil.github.io/qill.github.io/tags/feeling/"/>
    
      <category term="work" scheme="https://qiil.github.io/qill.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>sails Waterline ORM之Model篇</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-Waterline-ORM%E4%B9%8BModel%E7%AF%87/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-Waterline-ORM之Model篇/</id>
    <published>2017-07-30T15:41:06.000Z</published>
    <updated>2017-07-30T15:49:50.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法："><a href="#sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法：" class="headerlink" title="sails app默认使用Waterline ORM，下面是一些Waterline关于Models的方法："></a>sails app默认使用Waterline ORM，下面是一些Waterline关于Models的方法：</h3><p>这个部分关注于Waterline提供的model的方法，除此之外，一些其他的方法可以来自各种hooks。其通过底层的adapter来提供一些定制的功能，或者你也可以在app中手动编写特定的功能代码。</p>
<p>总体来说，模块的方法都是异步的意味着你不能单单地调用他们并用上他们打的返回值。除此之外，你必需用到callback，或者promises。大多数的内建函数都会接受一个callback作为最后一个参数。如果callback没有给出，那么会返回一个可链接的querry对象，该对象拥有.where()和.exec()站一些方法</p>
<ul>
<li><p><strong>.count（[criteria,] callback）</strong><br>返回根据条件查询到的记录数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">User.count(&#123;<span class="attr">name</span>:<span class="string">'Flynn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> <span class="title">countCB</span>(<span class="params">error, found</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'There are '</span> + found + <span class="string">' users called "Flynn"'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// There are 1 users called 'Flynn'</span></div><div class="line">  <span class="comment">// Don't forget to handle your errors</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.create()</strong><br>创建一条记录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.create(values).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, records</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.create(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, finn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.serverError(err); &#125;</div><div class="line"></div><div class="line">  sails.log(<span class="string">'Finn\'s id is:'</span>, finn.id);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中：values是一个字典包含着查询条件。</p>
<ul>
<li><p><strong>.destory()</strong><br>按照给出的条件删除数据库中所有的记录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.destroy(criteria).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例 删除所有 name为Finn的记录</span></div><div class="line">User.destroy(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> res.negotiate(err);</div><div class="line">  &#125;</div><div class="line">  sails.log(<span class="string">'Any users named Finn have now been deleted, if there were any.'</span>);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//样例2 删除id为3和97的记录</span></div><div class="line">User.destroy(&#123;</div><div class="line">  <span class="attr">id</span>: [ <span class="number">3</span>, <span class="number">97</span> ]</div><div class="line">&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> res.negotiate(err);</div><div class="line">  &#125;</div><div class="line">  sails.log(<span class="string">'The records for troublesome users (3 and 97) have been deleted, if they still existed.'</span>);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.find()</strong><br>根据给出条件查询数据库记录</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.find(criteria).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, records</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.find(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, usersNamedFinn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> res.serverError(err);</div><div class="line">  &#125;</div><div class="line">  sails.log(<span class="string">'Wow, there are %d users named Finn.  Check it out:'</span>, usersNamedFinn.length, usersNamedFinn);</div><div class="line">  <span class="keyword">return</span> res.json(usersNamedFinn);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>.findone()</strong><br>按照给出条件查找特定的记录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.findOne(criteria).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, record</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.create(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, finn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.serverError(err); &#125;</div><div class="line"></div><div class="line">  sails.log(<span class="string">'Finn\'s id is:'</span>, finn.id);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Notes</strong></p>
<blockquote>
<p>*findone函数如果查询不到数据是不会产生错误的，他会返回一个<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">- **.findOrCreate()**</div><div class="line">1. 首先按照第一个参数检查是否有满足条件的记录，如果没有相关记录，那么会按照第二个参数创建记录</div><div class="line">2. 如果没有参数传入，该方法会返回第一条存在的记录</div><div class="line">3. 没有提供要创建的记录，该方法会根据条件查询记录或者创建一条记录。</div><div class="line"></div><div class="line">```javascript</div><div class="line">// 用法</div><div class="line">Eg.Model.findOrCreate( findCriteria , recordToCreate , [callback] )</div><div class="line"></div><div class="line">// 样例</div><div class="line">User.findOrCreate(&#123;name:&apos;Walter&apos;&#125;, &#123;name:&apos;Jessie&apos;&#125;).exec(function createFindCB(error, createdOrFoundRecords)&#123;</div><div class="line">  console.log(&apos;What\&apos;s cookin\&apos; &apos;+createdOrFoundRecords.name+&apos;?&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
</li>
</ul>
<p><a href="http://sailsjs.com/documentation/reference/waterline-orm/models/find-or-create" target="_blank" rel="external">详细参数请见</a></p>
<ul>
<li><p><strong>.native()</strong><br>.native()仅在数据库为MongoDB的时候可用。<br>返回当前Mongo的一个集合的实例，允许你用Mongo源生querry方法。Mongo源生方法请见<a href="https://docs.mongodb.com/" target="_blank" rel="external">Mongo-Docs</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line">Pet.native(<span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> res.serverError(err);</div><div class="line"></div><div class="line">  collection.find(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">name</span>: <span class="literal">true</span></div><div class="line">  &#125;).toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.serverError(err);</div><div class="line">    <span class="keyword">return</span> res.ok(results);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.query()</strong><br>执行一次，原SQL的查询</p>
<blockquote>
<ul>
<li><strong>注意</strong>：query()方法与其他的Waterine其他的model方法不一样，.query()是不基于promise和不可以用.exec()的。从另一个角度来说，这个方法是不利用Waterlines的默认延迟机制。除此之外，该方法还提供原生的数据库驱动。</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">SomeModel.query(sql, valuesToEscape, <span class="function"><span class="keyword">function</span>(<span class="params">err, rawResult</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.create(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, finn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.serverError(err); &#125;</div><div class="line"></div><div class="line">  sails.log(<span class="string">'Finn\'s id is:'</span>, finn.id);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><strong>.stream(criteria)</strong><br>该方法用到node的流来管理model的数据<br>UserCOntroller.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  <span class="attr">testStream</span>: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (req.param(<span class="string">'startStream'</span>) &amp;&amp; req.isSocket)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> getSocket = req.socket;</div><div class="line"></div><div class="line">        <span class="comment">// Start the stream.  Pipe it to sockets.</span></div><div class="line">        User.stream(&#123;<span class="attr">name</span>:<span class="string">'Walter'</span>&#125;).pipe(getSocket.emit);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      res.view();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/view/users/testSocket.ejs<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> <span class="title">startListening</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    socket.on(<span class="string">'gotUser'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(data.name + <span class="string">' number '</span> + data.id + <span class="string">' has joined the party'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"addButton"</span> onClick=<span class="string">"socket.get('/users/testStream/', &#123;startStream:true&#125;)"</span>&gt;Stream all the Users!&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>.update()</strong><br>按照搜索条件更新数据记录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line">User.update(&#123;<span class="attr">name</span>:<span class="string">'Walter Jr'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'Flynn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> <span class="title">afterwards</span>(<span class="params">err, updated</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="comment">// handle error here- e.g. `res.serverError(err);`</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Updated user to have name '</span> + updated[<span class="number">0</span>].name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法：&quot;&gt;&lt;a href=&quot;#sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法：&quot; class=&quot;heade
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails request方法总结</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-request%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-request方法总结/</id>
    <published>2017-07-30T15:40:16.000Z</published>
    <updated>2017-07-30T15:48:41.819Z</updated>
    
    <content type="html"><![CDATA[<p>sails req接口提供了很多很好的方法，下面一个一个来看一下吧。</p>
<ul>
<li><p>req.accepted<br>可以一一个数组形式接受“媒体类型”的请求例如（text/html or application/json)这些，还会根据质量从高到底排序</p>
</li>
<li><p>req.acceptedCharsets<br>会返回一个包含着解码的数组</p>
</li>
<li><p>req.acceptedLanguages<br>返回一个数据包含请求体的可接受的语言</p>
</li>
<li><p>req.body<br>请求体的json对象，一般是包含请求传入的数据。</p>
</li>
<li><p>req.cookies<br>获取请求体cookies数据，是一个对象</p>
</li>
<li><p>req.fresh<br>一个用于说明用户登录的标志表示用户需要更新数据</p>
</li>
<li><p>req.headers<br>包含Http请求头的数据：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(req.headers);</div><div class="line"></div><div class="line">&#123; <span class="attr">host</span>: <span class="string">'localhost:1337'</span>,</div><div class="line">  <span class="attr">connection</span>: <span class="string">'keep-alive'</span>,</div><div class="line">  <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</div><div class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36'</span>,</div><div class="line">  <span class="attr">accept</span>: <span class="string">'*/*'</span>,</div><div class="line">  <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</div><div class="line">  <span class="string">'accept-language'</span>: <span class="string">'en-US,en;q=0.8,hi;q=0.6'</span>,</div><div class="line">  <span class="attr">cookie</span>: <span class="string">'sdfkslddklfk; sails.sid=s%3skdlfjkj1231lsdfnsc,m'</span> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>req.host<br>获取请求源的地址</p>
</li>
<li><p>req.ip<br>获取请求源的ip</p>
</li>
<li><p>req.isSockert<br>判断是否源自Socket.io的链接</p>
</li>
<li><p>req.method<br>获取请求方法</p>
</li>
<li><p>req.options<br>获取请求的行为，和请求的具体</p>
</li>
<li><p>req.params<br>截取GET请求路由的信息</p>
</li>
<li><p>req.path<br>获取请求的路径（除去动态询问的url）<br>EXAMPLE：加入请求的路径是：</p>
<blockquote>
<ul>
<li><a href="http://localhost:1337/donor/37?name=foo#foobar" target="_blank" rel="external">http://localhost:1337/donor/37?name=foo#foobar</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>那么req.path返回的是：<br>/donor/37</p>
<ul>
<li><p>req.protocol<br>保存请求的协议</p>
</li>
<li><p>req.query<br>获取GET请求数据：例如这个GET请求：GET <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">req.query.q</div><div class="line">// -&gt; &quot;mudslide&quot;</div></pre></td></tr></table></figure></p>
</li>
<li><p>req.secure<br>判断请求是否有TLS连接发送</p>
</li>
<li><p>req.singedCookies<br>这是一个包含所有标签cookies的字典</p>
</li>
<li><p>req.socket<br>如果当前请求是来自Socket.io用户的，那么req.socket只想这个Socket.io 的socket实例。</p>
</li>
<li><p>req.subdomains<br>一个数组包含了分拆的域名</p>
</li>
<li><p>req.url<br>获取整段url</p>
</li>
<li><p>req.xhr<br>一个值判断是否是AJAX请求</p>
</li>
<li><p>req.accepts()<br>检查请求是否为制定的格式</p>
</li>
<li><p>req.acceptsCharset()<br>返回这个请求是否是由对应的方式解码</p>
</li>
<li><p>req.allParams()<br>返回一个对象，包含所有的GET请求的数据</p>
</li>
<li><p>req.file()<br>上传文件相关</p>
</li>
<li><p>req.is()<br>传入一个字符串，判断这个请求头是否为传入字符串对应的头</p>
</li>
<li><p>req.params()<br>另一种获取GET请求数据的方式<br>req.query()获取的get请求类型是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">req.params()可以获取的get请求的类型是：```/foo/:id</div></pre></td></tr></table></figure></p>
</li>
</ul>
<p>所以路由中用到正则的url需要用req.params()方法获取</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sails req接口提供了很多很好的方法，下面一个一个来看一下吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;req.accepted&lt;br&gt;可以一一个数组形式接受“媒体类型”的请求例如（text/html or application/json)这些，还会根据质量从高到底排序&lt;/
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails response方法总结</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-response%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-response方法总结/</id>
    <published>2017-07-30T15:40:01.000Z</published>
    <updated>2017-07-30T15:47:26.982Z</updated>
    
    <content type="html"><![CDATA[<p>以下是sails res的一些方法：</p>
<ul>
<li><p>res.attachment()<br>这个方法很奇怪，似乎官方设计的不是很完善，不建议用</p>
</li>
<li><p>res.badRequest()<br>返回一个400（“Bad Request”）状态码明确这个请求是不合法的，这通常意味着请求包含不合法的参数或请求头，或者说请求试着去做不符合你的app的逻辑的事。<br>EXAMPLE：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( req.param(<span class="string">'amount'</span>) &lt; <span class="number">500</span> )</div><div class="line">  <span class="keyword">return</span> res.badRequest(</div><div class="line">    <span class="string">'Transaction limit exceeded. Please try again with an amount less than $500.'</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>res.clearCookie()<br>清除respond对应的cookie</p>
</li>
<li><p>res.cookie()<br>根据<figure class="highlight plain"><figcaption><span>的cookie</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">```res.cookie(name, value [,options]);</div></pre></td></tr></table></figure></p>
</li>
<li><p>res.created()<br>这个方法一般会发送201给用户，告诉用户资源已经成功创建</p>
</li>
<li><p>res.forbidden()<br>这个方法会返回403给用户，告诉用户权限不足</p>
</li>
<li><p>res.get()<br>返回当前的header的信息</p>
</li>
<li><p>res.json()<br>把res组织成JSON数据</p>
</li>
<li><p>res.jsonp()<br>和res.json类似</p>
</li>
<li><p>res.location()<br>设置定位回复，<br>和res.redirect()类似</p>
</li>
<li><p>res.notFound()<br>发送404表示找不到页面</p>
</li>
<li><p>res.ok()<br>发送200表示OK</p>
</li>
<li><p>res.redirect(url)<br>把用户重定向到制定的url</p>
</li>
<li><p>res.send()<br>发送一个简单的回复，statusCode默认设置为200<br>这个方法可用于适配其他终端的方法</p>
</li>
<li><p>res.serverError()<br>发送一个500表示服务端有一些错误发生了</p>
</li>
<li><p>res.set()<br>设置返回的 header 为特定的 value</p>
</li>
<li><p>res.status()<br>返回状态码</p>
</li>
<li><p>res.type()<br>设置“Content-Type”为给定的type</p>
</li>
<li><p>res.view()<br>回复一个HTML页面</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是sails res的一些方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;res.attachment()&lt;br&gt;这个方法很奇怪，似乎官方设计的不是很完善，不建议用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;res.badRequest()&lt;br&gt;返回一个400（“Bad Reques
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails configuration分析</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-configuration%E5%88%86%E6%9E%90/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-configuration分析/</id>
    <published>2017-07-30T15:39:43.000Z</published>
    <updated>2017-07-30T15:46:22.392Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>buleprint配置：<br>perfix：一些url字头/api/v2等<br>restPerfix：制定RESTful的url，restfulurl会添加到perfix后面<br>其他不会写。</p>
</li>
<li><p>bootstrap配置：<br>bootstrap配置能够用在所有的堆栈中，有以下例子：</p>
<ol>
<li>设置底层数据，查找或创建一个用户数据</li>
<li>对数据库进行完整性检查</li>
<li>利用设置的数据初始化数据库</li>
</ol>
</li>
<li><p>connection配置：<br>首先适配器是一个在Sails app 和你的数据库连接一个比较重要的东西<br>全局的连接都在connection.js中配置，然后会加载到项目的config文件中，你也可以在config.local中指定你的配置<br>样例：<br>假设我们用sails-memory适配器(通常在开发环境中比较适用)，首先需要npm install sails-memory，然后在connection.js中配置</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">myApp/config/connections.js</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.connections = &#123;</div><div class="line">  <span class="comment">// sails-disk is installed by default.</span></div><div class="line">  localDiskDb: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-disk'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">memory</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-memory'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>多个定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.connections = &#123;</div><div class="line">  <span class="attr">localMysql</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-mysql'</span>,</div><div class="line">    <span class="attr">user</span>: <span class="string">'root'</span>,</div><div class="line">    <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">    <span class="attr">database</span>: <span class="string">'someDbase'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">remoteMysql</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-mysql'</span>,</div><div class="line">    <span class="attr">user</span>: <span class="string">'remoteUser'</span>,</div><div class="line">    <span class="attr">password</span>: <span class="string">'remotePassword'</span>,</div><div class="line">    <span class="attr">host</span>: <span class="string">'http://remote-mysql-host.com'</span>,</div><div class="line">    <span class="attr">database</span>: <span class="string">'remoteDbase'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>当然你也可以在model中专门定义所用的数据库：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">myApp/config/models.js</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.models = &#123;</div><div class="line"></div><div class="line">  <span class="attr">connection</span>: <span class="string">'memory'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li>cors配置<br>这是跨域请求（跨原始资源共享）的配置，然而我并不懂，请期待后续更新。<br>安全上的考虑，CORS是默认关闭的在sails app中，不过启用是很简单的<br>为了允许来自白名单上的信任的所有的域对你的app 的cross-origin请求一般会吧<br>allROutes设置为true并提供一个origin设置在。。。。</li>
</ul>
<ul>
<li><p>csrf配置<br>一个CSRF保护的中间件的配置，这些选项都在csrf.js中设置好了，能从<a href="http://sailsjs.com/documentation/concepts/security/csrf" target="_blank" rel="external">这里</a>看到关于CSRF的文档<br>这些选项都是用来保护你的sails app抵御CSRF攻击的，一个潜在的攻击者不仅仅需要浏览器的缓存，还会需要可以刷新你app url的时间戳和，私密的CSRF token。<br><a href="http://sailsjs.com/documentation/reference/configuration/sails-config-csrf" target="_blank" rel="external">配置请点</a></p>
</li>
<li><p>globals配置<br>sails 关于全局变量的配置，例如开启lodash，async，models等</p>
</li>
<li><p>http配置<br>关于底层的http配置，一个sails app开启时需要按顺序经过的http中间件配置默认会经过这些中间件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">order: [</div><div class="line">      <span class="string">'startRequestTimer'</span>,</div><div class="line">      <span class="string">'cookieParser'</span>,</div><div class="line">      <span class="string">'session'</span>,</div><div class="line">      <span class="string">'myRequestLogger'</span>,</div><div class="line">      <span class="string">'bodyParser'</span>,</div><div class="line">      <span class="string">'handleBodyParserError'</span>,</div><div class="line">      <span class="string">'compress'</span>,</div><div class="line">      <span class="string">'methodOverride'</span>,</div><div class="line">      <span class="string">'poweredBy'</span>,</div><div class="line">      <span class="string">'$custom'</span>,</div><div class="line">      <span class="string">'router'</span>,</div><div class="line">      <span class="string">'www'</span>,</div><div class="line">      <span class="string">'favicon'</span>,</div><div class="line">      <span class="string">'404'</span>,</div><div class="line">      <span class="string">'500'</span></div><div class="line">    ]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以对这些中间件进行重写例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">poweredBy: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">      res.setHeader(<span class="string">'X-Powered-By'</span>, <span class="string">"Autobots"</span>);</div><div class="line">      next();</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<ul>
<li><p>i18n配置<br>这个是一些全球化的配置，包括语言等其他东西。</p>
</li>
<li><p>log配置<br>主要配置日志输出等级，根据不同等级决定输出什么日志，</p>
</li>
<li><p>model配置<br>这个配置文件会被/app/model中的配置覆盖所以需要精准地设计数据表，还是建议到/app/model中直接设置，当然一些共用的配置在这里配还是比较方便的，例如connection默认用什么数据库等。</p>
</li>
<li><p>policies配置<br>这时权限控制配置，一般来说会默认把所有权限都关掉然后根据白名单为每一个controller中的每一个方法添加权限例如，其权限控制可以在/api/prolice中具体编辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">FileController</span>: &#123;</div><div class="line">    <span class="attr">upload</span>: [<span class="string">'isAuthenticated'</span>, <span class="string">'canWrite'</span>, <span class="string">'hasEnoughSpace'</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>routes配置<br>路由配置，这里配置会覆盖restful的路由。</p>
</li>
<li><p>session配置<br>sails缓存的配置，session保存一些用户信息等东西。一般都会用到redis，这个配置和connection差不多。</p>
</li>
<li><p>views配置<br>这个是用作服务端渲染用到的view的配置，关于模板，主模板，还有模板引擎等</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;buleprint配置：&lt;br&gt;perfix：一些url字头/api/v2等&lt;br&gt;restPerfix：制定RESTful的url，restfulurl会添加到perfix后面&lt;br&gt;其他不会写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bootstrap配置
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails Blueprint API总结</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-Blueprint-API%E5%B0%8F%E8%AE%A1/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-Blueprint-API小计/</id>
    <published>2017-07-30T15:39:18.000Z</published>
    <updated>2017-07-30T15:45:33.339Z</updated>
    
    <content type="html"><![CDATA[<p>###concept:<br>蓝图的目的：<br>根据restful的一些代码未每一个controller加上<br>find<br>findOne<br>create<br>update<br>destroy<br>populate<br>add<br>remove<br>这些方法，当然自己也可以重写这些方法。<br>蓝图的路由：<br>当蓝图允许的时候，骨架会检测你的controller，models，和相关配置去精准地定位你的路由，路由配置文件在你的config/routes.js中。<br>有三种蓝图路由能够在sails中支持：<br>restful 路由、shortcut路由和action路由。</p>
<p>###蓝图：<br>激活/关闭 蓝图：<br>1.激活RESTful路由： sails.config.blueprints.rest = true，（一般在/config/blueprints.js)<br>Sails 会对每一个controller和model文件会创建同样的一个身份，例如api/controllers/PetController.js and api/models/Pet.js 会有同一个ID为 pet，如果两个文件都加入到一个sails app上面的话，sails会自动的为他们创建一条RESTful路由其URL为：/pet，无论这个app是否加载都一样。<br>2.激活Shortcut 路由：sails.config.blueprints.shortcuts = false<br>和RESTful路由一样，sails会对所有的controller/model对创建相同的ID，例如，POST /user and GET /user/create 这些Sails创建的路由当他加载 api/controllers/UserController.js 和 api/models/User.js 就会用到同样的代码相应<br>3.激活action路由：<br>Action会对每一个controller中的方法创建url例如在api/controllers/PetController.js 有:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports &#123;</div><div class="line">  <span class="attr">adore</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">"I adore pets!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后/pet/adore这条路由就会自动创建。<br>关于Action路由更多的问题就是一般来说都应该在生产的路由中把它关掉，然后我们再在/config/routes.js逐条配置更精确的路由。</p>
<p>###API：</p>
<ul>
<li>addto：<br>利用post请求 /:model/:id/:association/:fk这条url为一个表中的数据添加一条记录。</li>
<li>create：<br>利用post请求 /:model 这条url，post中的数据是整个文档（至少要有所有的require字段）</li>
<li>destroy：<br>请求与url DELETE /:model/:id 根据给出的ID删除数据库中的ID这个数据，如果没有给出ID则返回404</li>
<li>findone：<br>请求与url GET /:model/:id 返回model的一个记录，id是期望找到的用户的id只能用ID查询</li>
<li>find：<br>请求与url GET /:model/:id 返回满足搜索条件的所有记录（以数组形式），搜索条件是一个字典</li>
<li>remove：<br>请求与URL DELETE /:model/:id/:association/:fk 清除这个fk文档的association中的数据</li>
<li>update：<br>请求与url PUT /:model/:id 传一个字典，更新id这个文档的在字典中的值</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###concept:&lt;br&gt;蓝图的目的：&lt;br&gt;根据restful的一些代码未每一个controller加上&lt;br&gt;find&lt;br&gt;findOne&lt;br&gt;create&lt;br&gt;update&lt;br&gt;destroy&lt;br&gt;populate&lt;br&gt;add&lt;br&gt;remove&lt;br
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails application events与sails生命周期</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-application-event/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-application-event/</id>
    <published>2017-07-30T15:38:36.000Z</published>
    <updated>2017-07-30T15:43:27.570Z</updated>
    
    <content type="html"><![CDATA[<p>ready    app已经加载，并且bootstrap已经跑起来了，但还没开始监听请求。<br>lifted    app已经运行，并且监听请求。<br>lower    app已经关闭并且停止监听请求。<br>hook:<hook identity="">: loaded    The hook with the specified identity loaded and ran its initialize() method successfully.</hook></p>
<p>sails生命周期：<br>1.加载配置覆盖，根据实际开发的配置覆盖默认配置<br>2.加载用户配置，就是加载其他的没有被覆盖但是框架中默认的配置<br>3.加载钩子，加载其他钩子core hook会是第一个加载的然后就是user hooks和installable hooks<br>4.明确路由，准备好路由和对应事件。<br>5.暴露全局变量，在钩子都准备好之后会暴露全局变量（例如sails对象，models的数据库，service方法，_（lodash）和async等）<br>6.初始化app运行，lift() === load() + initialize() 加载 + 初始化</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ready    app已经加载，并且bootstrap已经跑起来了，但还没开始监听请求。&lt;br&gt;lifted    app已经运行，并且监听请求。&lt;br&gt;lower    app已经关闭并且停止监听请求。&lt;br&gt;hook:&lt;hook identity=&quot;&quot;&gt;: loade
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>Rockmongo配置详解</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/27/Rockmongo%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/27/Rockmongo配置详解/</id>
    <published>2017-07-27T15:10:41.000Z</published>
    <updated>2017-07-27T15:13:57.013Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了docker配置Rockmongo的流程：<br>下面是rockmongo的相关的配置<br>打开RockMongo安装目录下的config.php，所有的配置都在这里。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#进入里面的shell</span></div><div class="line">docker <span class="built_in">exec</span> -it CONTENER ID /bin/bash </div><div class="line"><span class="built_in">cd</span> app</div><div class="line">vim config.php</div></pre></td></tr></table></figure>
<p>###认证</p>
<ul>
<li><strong>mongo_auth 和control_auth</strong></li>
</ul>
<p>在开始使用RockMongo之前，你需要决定使用哪种校验方式。</p>
<pre><code>1. 如果mongo_auth被设成了true，用户必须使用MongoDB中的用户名和密码（由命令db.addUser()添加），所以配置中的mongo_user, mongo_pass和mongo_db就不再需要了，因为用户可以通过界面输入这些信息。

2. 如果control_auth被设置了true，而且mongo_auth设成了false，用户必须根据control_users选项的配置进行登录，mongo_user, mongo_pass和mongo_db就生效了。为了安全起见，安装完毕之后，应该尽快将默认的用户名和密码改成一个较为复杂的用户名和密码。

3. 如果mongo_auth和control_auth都被设置了false，则用户无需用户名和密码即可登录。
</code></pre><ul>
<li><strong>mongo_auth示范</strong></li>
</ul>
<p>你使用MongoDB的用户名、密码和数据库名进行登录：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;  <span class="comment">//界面显示的名字，取一个自己能识别的就行</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;    <span class="comment">//服务器的host</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;         <span class="comment">//服务器的端口</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;             <span class="comment">//关于超时的设置后面讲述</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">true</span>;          <span class="comment">//启用MongoDB校验 </span></div><div class="line">$i ++;                                                  <span class="comment">//i++后面能配置另一个数据库的链接信息，所以配置完一个数据库记得i++</span></div></pre></td></tr></table></figure></p>
<ul>
<li><strong>control_auth示范</strong></li>
</ul>
<p>你使用control_users中的配置进行登录。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;   <span class="comment">//同上</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;      <span class="comment">//同上</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;          <span class="comment">//同上</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;            <span class="comment">//同上</span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_db"] = "MONGO_DATABASE";  //需要连接的数据库名</span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_user"] = "MONGO_USERNAME"   //数据库中的用户名</span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_pass"] = "MONGO_PASSWORD";  //对应密码</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;<span class="comment">//禁用MongoDB校验  </span></div><div class="line">   </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_auth"</span>] = <span class="keyword">true</span>;<span class="comment">//启用登录控制校验  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"admin"</span>] = <span class="string">"admin"</span>;<span class="comment">//前一个是admin用户名，后一个admin是密码，可任意修改。这里是在rockmongo中用作登录的用户名和密码</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"iwind"</span>] = <span class="string">"123456"</span>;<span class="comment">//在下面可以复制更多的用户  </span></div><div class="line">$i ++;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>无认证示范</strong></li>
</ul>
<p>你无需任何用户名和密码即可登录。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;  </div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_db"] = "MONGO数据库名";  </span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_user"] = "MONGO用户名"  </span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_pass"] = "MONGO密码";  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;<span class="comment">//禁用MongoDB校验  </span></div><div class="line">   </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_auth"</span>] = <span class="keyword">false</span>;<span class="comment">//禁用登录控制校验  </span></div><div class="line">$i ++;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>config.php中Mongo具体配置说明</strong></li>
</ul>
<ol>
<li>mongo_name</li>
</ol>
<p>mongo服务器名字，可以是一个易懂的名字<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>mongo_host</li>
</ol>
<p>mongo主机地址<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>mongo_port</li>
</ol>
<p>mongo端口<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>mongo_db</li>
</ol>
<p>默认连接的数据库名称，只有mongo_auth=false的时候生效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_db"</span>] = <span class="string">"my_own_database"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>mongo_user</p>
<p>MongoDB验证的用户名，只有当mongo_auth=false时生效。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_user"</span>] = <span class="string">""</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>mongo_pass</p>
<p>MongoDB验证的密码，只有当mongo_auth=false时生效。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_pass"</span>] = <span class="string">""</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>mongo_auth</p>
</li>
</ol>
<p>是否开启MongoDB验证，如果该选项为true，则你登录时需要填写MongoDB中生成的用户名和密码。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>mongo_timeout</p>
<p>MongoDB连接超时时间，以秒为单位，如果设置0，则永远不超时。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;</div><div class="line">```   </div><div class="line">关于长查询的一个问题: http:<span class="comment">//code.google.com/p/rock-php/issues/detail?id=177</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="number">9.</span> mongo_options</div><div class="line"></div><div class="line">MongoDB连接的附加选项。</div><div class="line">```php</div><div class="line">$MONGO[<span class="string">"servers"</span>][$i] = <span class="keyword">array</span>(<span class="string">"replicaSet"</span> =&gt; <span class="string">"xxxxx"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><strong>Controls</strong></li>
</ul>
<ol>
<li>control_auth</li>
</ol>
<p>开启控制控制面板验证，只有当mongo_auth=false时有效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_auth"</span>] = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>control_users</li>
</ol>
<p>其中一个控制用户[USERNAME]=PASSWORD，只有当control_auth=true时生效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"myusername"</span>] = <span class="string">"mypassword"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"iwind"</span>] = <span class="string">"123456"</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>UI方面的配置</strong></li>
</ul>
<ol>
<li>ui_only_dbs</li>
</ol>
<p>需要显示的数据库，可以是一个字符串或者一个数组，如果这个列表不是空的那么不在这个列表上的数据库就不会被看到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_only_dbs"</span>] = <span class="string">"admin,local"</span>;<span class="comment">//a string  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_only_dbs"</span>] = <span class="keyword">array</span>( <span class="string">"admin"</span>, <span class="string">"local"</span> );<span class="comment">//an array</span></div></pre></td></tr></table></figure></p>
<ol>
<li>ui_hide_dbs</li>
</ol>
<p>需要隐藏的数据库，可以是一个字符串或者一个数组。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_dbs"</span>] = <span class="string">"shop,merchant"</span>;<span class="comment">//a string  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_dbs"</span>] = <span class="keyword">array</span>(<span class="string">"shop"</span>, <span class="string">"merchant"</span>);<span class="comment">//an array</span></div></pre></td></tr></table></figure></p>
<ol>
<li>ui_hide_collections</li>
</ol>
<p>需要隐藏的集合，可以是一个字符串或者数组，每一个集合的名称都可以用正则表达式表达<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_collections"</span>] = <span class="string">"users,admins"</span>;<span class="comment">//hide users and admins colleciton  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_collections"</span>] = <span class="string">"mail_(.*)"</span>;<span class="comment">//hide all collections whose prefix is "mail_"</span></div></pre></td></tr></table></figure></p>
<ol>
<li>ui_hide_system_collections</li>
</ol>
<p>如果我们想隐藏系统的集合的话，例如system.js， system.indexes，等，就把这个选项设置默认为false<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_system_collections"</span>] = <span class="keyword">false</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>MongoHQ配置</strong></li>
</ul>
<p>有两种方式，可以登录MongoHQ的MongoDB数据库。</p>
<ol>
<li>Log-in with MongoHQ account<pre><code class="php">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"MongoHQ"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"flame.local.mongohq.com"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27075"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">true</span>;  
$i ++;
</code></pre>
Then on log-in screen, you should input the username and password, dbname which registered on MongoHQ, then click “log-in”.</li>
</ol>
<ol>
<li>Log-in with control account<pre><code class="php">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"flame.local.mongohq.com"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27075"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_user"</span>] = <span class="string">"MongoHQ account"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_pass"</span>] = <span class="string">"MongoHQ password"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_db"</span>] = <span class="string">"MongoHQ Database Name"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"admin"</span>] = <span class="string">"123456"</span>;<span class="comment">//control user name  is "admin", password is "123456"  </span>
$i ++;
</code></pre>
Change mongo_user, mongo_pass and mongo_db to yours, then you can log-in with control user name and password (admin/123456 in this example).</li>
</ol>
<p>原文链接：<br><a href="http://rockmongo.com/wiki/configuration?lang=zh_cn" target="_blank" rel="external">http://rockmongo.com/wiki/configuration?lang=zh_cn</a><br><a href="http://www.cnblogs.com/moqiang02/p/4061140.html" target="_blank" rel="external">http://www.cnblogs.com/moqiang02/p/4061140.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了docker配置Rockmongo的流程：&lt;br&gt;下面是rockmongo的相关的配置&lt;br&gt;打开RockMongo安装目录下的config.php，所有的配置都在这里。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="linux琐碎事" scheme="https://qiil.github.io/qill.github.io/categories/linux%E7%90%90%E7%A2%8E%E4%BA%8B/"/>
    
    
      <category term="rockmongo" scheme="https://qiil.github.io/qill.github.io/tags/rockmongo/"/>
    
      <category term="mongodb" scheme="https://qiil.github.io/qill.github.io/tags/mongodb/"/>
    
  </entry>
  
</feed>
