<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qill</title>
  <subtitle>Qill</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qiil.github.io/qill.github.io/"/>
  <updated>2017-08-29T16:19:18.682Z</updated>
  <id>https://qiil.github.io/qill.github.io/</id>
  
  <author>
    <name>Qill</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谢谢你，明哥！</title>
    <link href="https://qiil.github.io/qill.github.io/2017/08/29/%E8%B0%A2%E8%B0%A2%E4%BD%A0%EF%BC%8C%E6%98%8E%E5%93%A5%EF%BC%81/"/>
    <id>https://qiil.github.io/qill.github.io/2017/08/29/谢谢你，明哥！/</id>
    <published>2017-08-29T15:52:33.000Z</published>
    <updated>2017-08-29T16:19:18.682Z</updated>
    
    <content type="html"><![CDATA[<p>其实，我想写这个很久了。最近一直在加班状态，加上回到宿舍就不太想动了。但是每当我在园区走回公司时，每看到这张凳子，还是不仅会想到你对我的启发。</p>
<p>虽然只有短短的两周的接触，但是明哥你对我的影响无疑是深远的。我从你身上懂得了当事情很多的时候，就把事情都列出来，然后一点一点慢慢做处事方式。我现在也渐渐地去思考，我自己的工作是为了什么，自己的代码所干的事情是什么，为什么要这么干。也渐渐明白了你说的一天代码不及交流一下的感触了。最最重要的是，我拥有了你这个朋友，一个愿意把一个如此菜逼的我手把手教学两周的朋友。</p>
<p>刚开始工作的第一周，我深知自己的技术水平真的是非常一般，无论是node、数据库等的知识还停留在幼儿园阶段，我自己也明白这都是我大学荒废时间的后果。但是开始工作的头两周真的是你改变了我。现在，我慢慢可以独立开发了，我的同事也都很友好而且，xj也非常有耐心。我能够独立负责好一个简单的项目了，而且也参与到公司的项目中去了。虽然最近加班很累，但我深刻地感觉到我每天都在一点一滴地进步着（随着踩下一个又一个的坑）哈哈。</p>
<p>我舍友觉得我最近的加班好没有人性，虽然我也是这么觉得的，但是我觉得着也是锻炼我抗压的好机会呀。我会在将来的某个阶段离开这里，但离开的时候我一定要在公司被人认同，这也是你和我说的要有始有终。</p>
<p>在实习阶段的我，现在还有很多东西要学呢。无论是技术还是为人处世，最近我也感受到在职场的一些不适合的言论了，幸好xj人很nice，每一次都会提醒我。或许是我一直随性习惯了吧，有些行为还是不太好改，但是我会努力的。</p>
<p>恩还是这个凳子，这是你要离开的前一天我们在这里坐了一会儿，你和我谈互联网与人生规划，我和你谈人生理想。我知道了你是一个“不太幸运的人”，以前也错失了很多机会，但是我在这里也想祝福一下你，希望你以后能够工作顺利。以后或许我还能和你共事呢哈哈。或许之后你会是我的员工也未必噢！</p>
<p><img src="http://oqzgtjqen.bkt.clouddn.com/%E6%98%8E%E5%93%A5.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实，我想写这个很久了。最近一直在加班状态，加上回到宿舍就不太想动了。但是每当我在园区走回公司时，每看到这张凳子，还是不仅会想到你对我的启发。&lt;/p&gt;
&lt;p&gt;虽然只有短短的两周的接触，但是明哥你对我的影响无疑是深远的。我从你身上懂得了当事情很多的时候，就把事情都列出来，然后
    
    </summary>
    
      <category term="人生观感" scheme="https://qiil.github.io/qill.github.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%82%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>实习半个月的感觉</title>
    <link href="https://qiil.github.io/qill.github.io/2017/08/09/%E5%AE%9E%E4%B9%A0%E5%8D%8A%E4%B8%AA%E6%9C%88%E7%9A%84%E6%84%9F%E8%A7%89/"/>
    <id>https://qiil.github.io/qill.github.io/2017/08/09/实习半个月的感觉/</id>
    <published>2017-08-09T15:59:43.000Z</published>
    <updated>2017-08-09T16:28:28.778Z</updated>
    
    <content type="html"><![CDATA[<p>今晚终于能够初步了解Vue的入门知识了，之前看Vue这个东西不知道怎么的就是看得很头晕，但内心明明知道Vue的前端知识应该很好学才对的呀，真是奇了怪了，现在终于是看懂了，可算是扬眉吐气了。</p>
<p>实习半个月来，我已经看完了sails.js的大部分文档、懂得了什么是RESTful、什么是前后端分离、见识了Waterline的ORM、领略了controller、service、config、police的分层开发模式、接手了明哥留给我的KPI系统、看完了C后台的所有内容。看上去其实很多东西，但是我意识到我的时间还是很少。因为，我的毕设还没动手，我还不懂ES6的代码规范，我需要学会egg.js的框架知识以用于之后新版的C后台的开发，我需要首席async，promise等控制异步的模块，现在我自己的node知识只能说是半桶水，有很多原理我自己还是不清楚，我还需要快速地熟练mongodb的操作。</p>
<p>或许这些可以慢慢来，但是在这互联网的时代，我自己深刻地意识到自己的压力，我或许想要发展成一个node工程师，然后再学习技术然后发展成一个数据处理或者数据挖掘清晰的python工程师，然后平时可以干干“坏事”。或许我是一个比较幸运的人，我一路走来，还有之后的路我都看到了困难与机会，我需要时刻给自己充电。</p>
<p>但是这一周，过了三天了，每天从公司回来我都觉得很困，很累呀，真是蛋疼。在公司里面坐着的那张椅子是软垫的，坐得我的腰很辛苦，我都一度以为我的身体开始发虚了，难道真的是撸多了？今天晚上怒跑了华师一圈加上运动厂两圈，然后脖子终于舒服一点了。但是坐久了，腰还是一样，看来要加快健身的日程了。</p>
<p>昨天和肥航逛了一个晚上，我发现了他对工作有点逃避，其实我似乎对新的东西也有着很多的逃避心里，就像现在的实习，我还不是因为我堂哥有个推荐我的机会我才会来面试的嘛，不然我肯定会拖很久才去实习的，不过在实习的时候我也很幸运，也学到了很多，怎么说呢，我现在的感觉就是一天真的事太短了点，现在已经是00.25分了，写道这里已经用了25分钟，在之前我还答应了猪猪，我写完这个，然后去睡觉的，但是一直停不了笔，真是蛋疼。</p>
<p>后面还有挑战，继续加油吧！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今晚终于能够初步了解Vue的入门知识了，之前看Vue这个东西不知道怎么的就是看得很头晕，但内心明明知道Vue的前端知识应该很好学才对的呀，真是奇了怪了，现在终于是看懂了，可算是扬眉吐气了。&lt;/p&gt;
&lt;p&gt;实习半个月来，我已经看完了sails.js的大部分文档、懂得了什么是R
    
    </summary>
    
      <category term="人生观感" scheme="https://qiil.github.io/qill.github.io/categories/%E4%BA%BA%E7%94%9F%E8%A7%82%E6%84%9F/"/>
    
    
      <category term="feeling" scheme="https://qiil.github.io/qill.github.io/tags/feeling/"/>
    
      <category term="work" scheme="https://qiil.github.io/qill.github.io/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>sails Waterline ORM之Model篇</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-Waterline-ORM%E4%B9%8BModel%E7%AF%87/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-Waterline-ORM之Model篇/</id>
    <published>2017-07-30T15:41:06.000Z</published>
    <updated>2017-07-30T15:49:50.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法："><a href="#sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法：" class="headerlink" title="sails app默认使用Waterline ORM，下面是一些Waterline关于Models的方法："></a>sails app默认使用Waterline ORM，下面是一些Waterline关于Models的方法：</h3><p>这个部分关注于Waterline提供的model的方法，除此之外，一些其他的方法可以来自各种hooks。其通过底层的adapter来提供一些定制的功能，或者你也可以在app中手动编写特定的功能代码。</p>
<p>总体来说，模块的方法都是异步的意味着你不能单单地调用他们并用上他们打的返回值。除此之外，你必需用到callback，或者promises。大多数的内建函数都会接受一个callback作为最后一个参数。如果callback没有给出，那么会返回一个可链接的querry对象，该对象拥有.where()和.exec()站一些方法</p>
<ul>
<li><p><strong>.count（[criteria,] callback）</strong><br>返回根据条件查询到的记录数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">User.count(&#123;<span class="attr">name</span>:<span class="string">'Flynn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> <span class="title">countCB</span>(<span class="params">error, found</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'There are '</span> + found + <span class="string">' users called "Flynn"'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// There are 1 users called 'Flynn'</span></div><div class="line">  <span class="comment">// Don't forget to handle your errors</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.create()</strong><br>创建一条记录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.create(values).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, records</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.create(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, finn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.serverError(err); &#125;</div><div class="line"></div><div class="line">  sails.log(<span class="string">'Finn\'s id is:'</span>, finn.id);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中：values是一个字典包含着查询条件。</p>
<ul>
<li><p><strong>.destory()</strong><br>按照给出的条件删除数据库中所有的记录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.destroy(criteria).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例 删除所有 name为Finn的记录</span></div><div class="line">User.destroy(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> res.negotiate(err);</div><div class="line">  &#125;</div><div class="line">  sails.log(<span class="string">'Any users named Finn have now been deleted, if there were any.'</span>);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//样例2 删除id为3和97的记录</span></div><div class="line">User.destroy(&#123;</div><div class="line">  <span class="attr">id</span>: [ <span class="number">3</span>, <span class="number">97</span> ]</div><div class="line">&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> res.negotiate(err);</div><div class="line">  &#125;</div><div class="line">  sails.log(<span class="string">'The records for troublesome users (3 and 97) have been deleted, if they still existed.'</span>);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.find()</strong><br>根据给出条件查询数据库记录</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.find(criteria).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, records</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.find(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, usersNamedFinn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">return</span> res.serverError(err);</div><div class="line">  &#125;</div><div class="line">  sails.log(<span class="string">'Wow, there are %d users named Finn.  Check it out:'</span>, usersNamedFinn.length, usersNamedFinn);</div><div class="line">  <span class="keyword">return</span> res.json(usersNamedFinn);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>.findone()</strong><br>按照给出条件查找特定的记录</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">Something.findOne(criteria).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, record</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.create(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, finn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.serverError(err); &#125;</div><div class="line"></div><div class="line">  sails.log(<span class="string">'Finn\'s id is:'</span>, finn.id);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Notes</strong></p>
<blockquote>
<p>*findone函数如果查询不到数据是不会产生错误的，他会返回一个<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">- **.findOrCreate()**</div><div class="line">1. 首先按照第一个参数检查是否有满足条件的记录，如果没有相关记录，那么会按照第二个参数创建记录</div><div class="line">2. 如果没有参数传入，该方法会返回第一条存在的记录</div><div class="line">3. 没有提供要创建的记录，该方法会根据条件查询记录或者创建一条记录。</div><div class="line"></div><div class="line">```javascript</div><div class="line">// 用法</div><div class="line">Eg.Model.findOrCreate( findCriteria , recordToCreate , [callback] )</div><div class="line"></div><div class="line">// 样例</div><div class="line">User.findOrCreate(&#123;name:&apos;Walter&apos;&#125;, &#123;name:&apos;Jessie&apos;&#125;).exec(function createFindCB(error, createdOrFoundRecords)&#123;</div><div class="line">  console.log(&apos;What\&apos;s cookin\&apos; &apos;+createdOrFoundRecords.name+&apos;?&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
</blockquote>
</li>
</ul>
<p><a href="http://sailsjs.com/documentation/reference/waterline-orm/models/find-or-create" target="_blank" rel="external">详细参数请见</a></p>
<ul>
<li><p><strong>.native()</strong><br>.native()仅在数据库为MongoDB的时候可用。<br>返回当前Mongo的一个集合的实例，允许你用Mongo源生querry方法。Mongo源生方法请见<a href="https://docs.mongodb.com/" target="_blank" rel="external">Mongo-Docs</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line">Pet.native(<span class="function"><span class="keyword">function</span>(<span class="params">err, collection</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> res.serverError(err);</div><div class="line"></div><div class="line">  collection.find(&#123;&#125;, &#123;</div><div class="line">    <span class="attr">name</span>: <span class="literal">true</span></div><div class="line">  &#125;).toArray(<span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.serverError(err);</div><div class="line">    <span class="keyword">return</span> res.ok(results);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>.query()</strong><br>执行一次，原SQL的查询</p>
<blockquote>
<ul>
<li><strong>注意</strong>：query()方法与其他的Waterine其他的model方法不一样，.query()是不基于promise和不可以用.exec()的。从另一个角度来说，这个方法是不利用Waterlines的默认延迟机制。除此之外，该方法还提供原生的数据库驱动。</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用法</span></div><div class="line">SomeModel.query(sql, valuesToEscape, <span class="function"><span class="keyword">function</span>(<span class="params">err, rawResult</span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 样例</span></div><div class="line">User.create(&#123;<span class="attr">name</span>:<span class="string">'Finn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, finn</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.serverError(err); &#125;</div><div class="line"></div><div class="line">  sails.log(<span class="string">'Finn\'s id is:'</span>, finn.id);</div><div class="line">  <span class="keyword">return</span> res.ok();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><strong>.stream(criteria)</strong><br>该方法用到node的流来管理model的数据<br>UserCOntroller.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  <span class="attr">testStream</span>: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (req.param(<span class="string">'startStream'</span>) &amp;&amp; req.isSocket)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> getSocket = req.socket;</div><div class="line"></div><div class="line">        <span class="comment">// Start the stream.  Pipe it to sockets.</span></div><div class="line">        User.stream(&#123;<span class="attr">name</span>:<span class="string">'Walter'</span>&#125;).pipe(getSocket.emit);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      res.view();</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/view/users/testSocket.ejs<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> <span class="title">startListening</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    socket.on(<span class="string">'gotUser'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(data.name + <span class="string">' number '</span> + data.id + <span class="string">' has joined the party'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&lt;/script&gt;</div><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"addButton"</span> onClick=<span class="string">"socket.get('/users/testStream/', &#123;startStream:true&#125;)"</span>&gt;Stream all the Users!&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>.update()</strong><br>按照搜索条件更新数据记录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 样例</span></div><div class="line">User.update(&#123;<span class="attr">name</span>:<span class="string">'Walter Jr'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'Flynn'</span>&#125;).exec(<span class="function"><span class="keyword">function</span> <span class="title">afterwards</span>(<span class="params">err, updated</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="comment">// handle error here- e.g. `res.serverError(err);`</span></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Updated user to have name '</span> + updated[<span class="number">0</span>].name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法：&quot;&gt;&lt;a href=&quot;#sails-app默认使用Waterline-ORM，下面是一些Waterline关于Models的方法：&quot; class=&quot;heade
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails request方法总结</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-request%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-request方法总结/</id>
    <published>2017-07-30T15:40:16.000Z</published>
    <updated>2017-07-30T15:48:41.819Z</updated>
    
    <content type="html"><![CDATA[<p>sails req接口提供了很多很好的方法，下面一个一个来看一下吧。</p>
<ul>
<li><p>req.accepted<br>可以一一个数组形式接受“媒体类型”的请求例如（text/html or application/json)这些，还会根据质量从高到底排序</p>
</li>
<li><p>req.acceptedCharsets<br>会返回一个包含着解码的数组</p>
</li>
<li><p>req.acceptedLanguages<br>返回一个数据包含请求体的可接受的语言</p>
</li>
<li><p>req.body<br>请求体的json对象，一般是包含请求传入的数据。</p>
</li>
<li><p>req.cookies<br>获取请求体cookies数据，是一个对象</p>
</li>
<li><p>req.fresh<br>一个用于说明用户登录的标志表示用户需要更新数据</p>
</li>
<li><p>req.headers<br>包含Http请求头的数据：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(req.headers);</div><div class="line"></div><div class="line">&#123; <span class="attr">host</span>: <span class="string">'localhost:1337'</span>,</div><div class="line">  <span class="attr">connection</span>: <span class="string">'keep-alive'</span>,</div><div class="line">  <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</div><div class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36'</span>,</div><div class="line">  <span class="attr">accept</span>: <span class="string">'*/*'</span>,</div><div class="line">  <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</div><div class="line">  <span class="string">'accept-language'</span>: <span class="string">'en-US,en;q=0.8,hi;q=0.6'</span>,</div><div class="line">  <span class="attr">cookie</span>: <span class="string">'sdfkslddklfk; sails.sid=s%3skdlfjkj1231lsdfnsc,m'</span> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>req.host<br>获取请求源的地址</p>
</li>
<li><p>req.ip<br>获取请求源的ip</p>
</li>
<li><p>req.isSockert<br>判断是否源自Socket.io的链接</p>
</li>
<li><p>req.method<br>获取请求方法</p>
</li>
<li><p>req.options<br>获取请求的行为，和请求的具体</p>
</li>
<li><p>req.params<br>截取GET请求路由的信息</p>
</li>
<li><p>req.path<br>获取请求的路径（除去动态询问的url）<br>EXAMPLE：加入请求的路径是：</p>
<blockquote>
<ul>
<li><a href="http://localhost:1337/donor/37?name=foo#foobar" target="_blank" rel="external">http://localhost:1337/donor/37?name=foo#foobar</a></li>
</ul>
</blockquote>
</li>
</ul>
<p>那么req.path返回的是：<br>/donor/37</p>
<ul>
<li><p>req.protocol<br>保存请求的协议</p>
</li>
<li><p>req.query<br>获取GET请求数据：例如这个GET请求：GET <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">req.query.q</div><div class="line">// -&gt; &quot;mudslide&quot;</div></pre></td></tr></table></figure></p>
</li>
<li><p>req.secure<br>判断请求是否有TLS连接发送</p>
</li>
<li><p>req.singedCookies<br>这是一个包含所有标签cookies的字典</p>
</li>
<li><p>req.socket<br>如果当前请求是来自Socket.io用户的，那么req.socket只想这个Socket.io 的socket实例。</p>
</li>
<li><p>req.subdomains<br>一个数组包含了分拆的域名</p>
</li>
<li><p>req.url<br>获取整段url</p>
</li>
<li><p>req.xhr<br>一个值判断是否是AJAX请求</p>
</li>
<li><p>req.accepts()<br>检查请求是否为制定的格式</p>
</li>
<li><p>req.acceptsCharset()<br>返回这个请求是否是由对应的方式解码</p>
</li>
<li><p>req.allParams()<br>返回一个对象，包含所有的GET请求的数据</p>
</li>
<li><p>req.file()<br>上传文件相关</p>
</li>
<li><p>req.is()<br>传入一个字符串，判断这个请求头是否为传入字符串对应的头</p>
</li>
<li><p>req.params()<br>另一种获取GET请求数据的方式<br>req.query()获取的get请求类型是：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">req.params()可以获取的get请求的类型是：```/foo/:id</div></pre></td></tr></table></figure></p>
</li>
</ul>
<p>所以路由中用到正则的url需要用req.params()方法获取</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sails req接口提供了很多很好的方法，下面一个一个来看一下吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;req.accepted&lt;br&gt;可以一一个数组形式接受“媒体类型”的请求例如（text/html or application/json)这些，还会根据质量从高到底排序&lt;/
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails response方法总结</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-response%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-response方法总结/</id>
    <published>2017-07-30T15:40:01.000Z</published>
    <updated>2017-07-30T15:47:26.982Z</updated>
    
    <content type="html"><![CDATA[<p>以下是sails res的一些方法：</p>
<ul>
<li><p>res.attachment()<br>这个方法很奇怪，似乎官方设计的不是很完善，不建议用</p>
</li>
<li><p>res.badRequest()<br>返回一个400（“Bad Request”）状态码明确这个请求是不合法的，这通常意味着请求包含不合法的参数或请求头，或者说请求试着去做不符合你的app的逻辑的事。<br>EXAMPLE：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( req.param(<span class="string">'amount'</span>) &lt; <span class="number">500</span> )</div><div class="line">  <span class="keyword">return</span> res.badRequest(</div><div class="line">    <span class="string">'Transaction limit exceeded. Please try again with an amount less than $500.'</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>res.clearCookie()<br>清除respond对应的cookie</p>
</li>
<li><p>res.cookie()<br>根据<figure class="highlight plain"><figcaption><span>的cookie</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">```res.cookie(name, value [,options]);</div></pre></td></tr></table></figure></p>
</li>
<li><p>res.created()<br>这个方法一般会发送201给用户，告诉用户资源已经成功创建</p>
</li>
<li><p>res.forbidden()<br>这个方法会返回403给用户，告诉用户权限不足</p>
</li>
<li><p>res.get()<br>返回当前的header的信息</p>
</li>
<li><p>res.json()<br>把res组织成JSON数据</p>
</li>
<li><p>res.jsonp()<br>和res.json类似</p>
</li>
<li><p>res.location()<br>设置定位回复，<br>和res.redirect()类似</p>
</li>
<li><p>res.notFound()<br>发送404表示找不到页面</p>
</li>
<li><p>res.ok()<br>发送200表示OK</p>
</li>
<li><p>res.redirect(url)<br>把用户重定向到制定的url</p>
</li>
<li><p>res.send()<br>发送一个简单的回复，statusCode默认设置为200<br>这个方法可用于适配其他终端的方法</p>
</li>
<li><p>res.serverError()<br>发送一个500表示服务端有一些错误发生了</p>
</li>
<li><p>res.set()<br>设置返回的 header 为特定的 value</p>
</li>
<li><p>res.status()<br>返回状态码</p>
</li>
<li><p>res.type()<br>设置“Content-Type”为给定的type</p>
</li>
<li><p>res.view()<br>回复一个HTML页面</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下是sails res的一些方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;res.attachment()&lt;br&gt;这个方法很奇怪，似乎官方设计的不是很完善，不建议用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;res.badRequest()&lt;br&gt;返回一个400（“Bad Reques
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails configuration分析</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-configuration%E5%88%86%E6%9E%90/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-configuration分析/</id>
    <published>2017-07-30T15:39:43.000Z</published>
    <updated>2017-07-30T15:46:22.392Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>buleprint配置：<br>perfix：一些url字头/api/v2等<br>restPerfix：制定RESTful的url，restfulurl会添加到perfix后面<br>其他不会写。</p>
</li>
<li><p>bootstrap配置：<br>bootstrap配置能够用在所有的堆栈中，有以下例子：</p>
<ol>
<li>设置底层数据，查找或创建一个用户数据</li>
<li>对数据库进行完整性检查</li>
<li>利用设置的数据初始化数据库</li>
</ol>
</li>
<li><p>connection配置：<br>首先适配器是一个在Sails app 和你的数据库连接一个比较重要的东西<br>全局的连接都在connection.js中配置，然后会加载到项目的config文件中，你也可以在config.local中指定你的配置<br>样例：<br>假设我们用sails-memory适配器(通常在开发环境中比较适用)，首先需要npm install sails-memory，然后在connection.js中配置</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">myApp/config/connections.js</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.connections = &#123;</div><div class="line">  <span class="comment">// sails-disk is installed by default.</span></div><div class="line">  localDiskDb: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-disk'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">memory</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-memory'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>多个定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.connections = &#123;</div><div class="line">  <span class="attr">localMysql</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-mysql'</span>,</div><div class="line">    <span class="attr">user</span>: <span class="string">'root'</span>,</div><div class="line">    <span class="attr">host</span>: <span class="string">'localhost'</span>,</div><div class="line">    <span class="attr">database</span>: <span class="string">'someDbase'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">remoteMysql</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-mysql'</span>,</div><div class="line">    <span class="attr">user</span>: <span class="string">'remoteUser'</span>,</div><div class="line">    <span class="attr">password</span>: <span class="string">'remotePassword'</span>,</div><div class="line">    <span class="attr">host</span>: <span class="string">'http://remote-mysql-host.com'</span>,</div><div class="line">    <span class="attr">database</span>: <span class="string">'remoteDbase'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>当然你也可以在model中专门定义所用的数据库：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">myApp/config/models.js</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports.models = &#123;</div><div class="line"></div><div class="line">  <span class="attr">connection</span>: <span class="string">'memory'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<ul>
<li>cors配置<br>这是跨域请求（跨原始资源共享）的配置，然而我并不懂，请期待后续更新。<br>安全上的考虑，CORS是默认关闭的在sails app中，不过启用是很简单的<br>为了允许来自白名单上的信任的所有的域对你的app 的cross-origin请求一般会吧<br>allROutes设置为true并提供一个origin设置在。。。。</li>
</ul>
<ul>
<li><p>csrf配置<br>一个CSRF保护的中间件的配置，这些选项都在csrf.js中设置好了，能从<a href="http://sailsjs.com/documentation/concepts/security/csrf" target="_blank" rel="external">这里</a>看到关于CSRF的文档<br>这些选项都是用来保护你的sails app抵御CSRF攻击的，一个潜在的攻击者不仅仅需要浏览器的缓存，还会需要可以刷新你app url的时间戳和，私密的CSRF token。<br><a href="http://sailsjs.com/documentation/reference/configuration/sails-config-csrf" target="_blank" rel="external">配置请点</a></p>
</li>
<li><p>globals配置<br>sails 关于全局变量的配置，例如开启lodash，async，models等</p>
</li>
<li><p>http配置<br>关于底层的http配置，一个sails app开启时需要按顺序经过的http中间件配置默认会经过这些中间件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">order: [</div><div class="line">      <span class="string">'startRequestTimer'</span>,</div><div class="line">      <span class="string">'cookieParser'</span>,</div><div class="line">      <span class="string">'session'</span>,</div><div class="line">      <span class="string">'myRequestLogger'</span>,</div><div class="line">      <span class="string">'bodyParser'</span>,</div><div class="line">      <span class="string">'handleBodyParserError'</span>,</div><div class="line">      <span class="string">'compress'</span>,</div><div class="line">      <span class="string">'methodOverride'</span>,</div><div class="line">      <span class="string">'poweredBy'</span>,</div><div class="line">      <span class="string">'$custom'</span>,</div><div class="line">      <span class="string">'router'</span>,</div><div class="line">      <span class="string">'www'</span>,</div><div class="line">      <span class="string">'favicon'</span>,</div><div class="line">      <span class="string">'404'</span>,</div><div class="line">      <span class="string">'500'</span></div><div class="line">    ]</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以对这些中间件进行重写例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">poweredBy: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">      res.setHeader(<span class="string">'X-Powered-By'</span>, <span class="string">"Autobots"</span>);</div><div class="line">      next();</div><div class="line">    &#125;,</div></pre></td></tr></table></figure></p>
<ul>
<li><p>i18n配置<br>这个是一些全球化的配置，包括语言等其他东西。</p>
</li>
<li><p>log配置<br>主要配置日志输出等级，根据不同等级决定输出什么日志，</p>
</li>
<li><p>model配置<br>这个配置文件会被/app/model中的配置覆盖所以需要精准地设计数据表，还是建议到/app/model中直接设置，当然一些共用的配置在这里配还是比较方便的，例如connection默认用什么数据库等。</p>
</li>
<li><p>policies配置<br>这时权限控制配置，一般来说会默认把所有权限都关掉然后根据白名单为每一个controller中的每一个方法添加权限例如，其权限控制可以在/api/prolice中具体编辑：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">FileController</span>: &#123;</div><div class="line">    <span class="attr">upload</span>: [<span class="string">'isAuthenticated'</span>, <span class="string">'canWrite'</span>, <span class="string">'hasEnoughSpace'</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>routes配置<br>路由配置，这里配置会覆盖restful的路由。</p>
</li>
<li><p>session配置<br>sails缓存的配置，session保存一些用户信息等东西。一般都会用到redis，这个配置和connection差不多。</p>
</li>
<li><p>views配置<br>这个是用作服务端渲染用到的view的配置，关于模板，主模板，还有模板引擎等</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;buleprint配置：&lt;br&gt;perfix：一些url字头/api/v2等&lt;br&gt;restPerfix：制定RESTful的url，restfulurl会添加到perfix后面&lt;br&gt;其他不会写。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bootstrap配置
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails Blueprint API总结</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-Blueprint-API%E5%B0%8F%E8%AE%A1/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-Blueprint-API小计/</id>
    <published>2017-07-30T15:39:18.000Z</published>
    <updated>2017-07-30T15:45:33.339Z</updated>
    
    <content type="html"><![CDATA[<p>###concept:<br>蓝图的目的：<br>根据restful的一些代码未每一个controller加上<br>find<br>findOne<br>create<br>update<br>destroy<br>populate<br>add<br>remove<br>这些方法，当然自己也可以重写这些方法。<br>蓝图的路由：<br>当蓝图允许的时候，骨架会检测你的controller，models，和相关配置去精准地定位你的路由，路由配置文件在你的config/routes.js中。<br>有三种蓝图路由能够在sails中支持：<br>restful 路由、shortcut路由和action路由。</p>
<p>###蓝图：<br>激活/关闭 蓝图：<br>1.激活RESTful路由： sails.config.blueprints.rest = true，（一般在/config/blueprints.js)<br>Sails 会对每一个controller和model文件会创建同样的一个身份，例如api/controllers/PetController.js and api/models/Pet.js 会有同一个ID为 pet，如果两个文件都加入到一个sails app上面的话，sails会自动的为他们创建一条RESTful路由其URL为：/pet，无论这个app是否加载都一样。<br>2.激活Shortcut 路由：sails.config.blueprints.shortcuts = false<br>和RESTful路由一样，sails会对所有的controller/model对创建相同的ID，例如，POST /user and GET /user/create 这些Sails创建的路由当他加载 api/controllers/UserController.js 和 api/models/User.js 就会用到同样的代码相应<br>3.激活action路由：<br>Action会对每一个controller中的方法创建url例如在api/controllers/PetController.js 有:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports &#123;</div><div class="line">  <span class="attr">adore</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.send(<span class="string">"I adore pets!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后/pet/adore这条路由就会自动创建。<br>关于Action路由更多的问题就是一般来说都应该在生产的路由中把它关掉，然后我们再在/config/routes.js逐条配置更精确的路由。</p>
<p>###API：</p>
<ul>
<li>addto：<br>利用post请求 /:model/:id/:association/:fk这条url为一个表中的数据添加一条记录。</li>
<li>create：<br>利用post请求 /:model 这条url，post中的数据是整个文档（至少要有所有的require字段）</li>
<li>destroy：<br>请求与url DELETE /:model/:id 根据给出的ID删除数据库中的ID这个数据，如果没有给出ID则返回404</li>
<li>findone：<br>请求与url GET /:model/:id 返回model的一个记录，id是期望找到的用户的id只能用ID查询</li>
<li>find：<br>请求与url GET /:model/:id 返回满足搜索条件的所有记录（以数组形式），搜索条件是一个字典</li>
<li>remove：<br>请求与URL DELETE /:model/:id/:association/:fk 清除这个fk文档的association中的数据</li>
<li>update：<br>请求与url PUT /:model/:id 传一个字典，更新id这个文档的在字典中的值</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###concept:&lt;br&gt;蓝图的目的：&lt;br&gt;根据restful的一些代码未每一个controller加上&lt;br&gt;find&lt;br&gt;findOne&lt;br&gt;create&lt;br&gt;update&lt;br&gt;destroy&lt;br&gt;populate&lt;br&gt;add&lt;br&gt;remove&lt;br
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>sails application events与sails生命周期</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/30/sails-application-event/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/30/sails-application-event/</id>
    <published>2017-07-30T15:38:36.000Z</published>
    <updated>2017-07-30T15:43:27.570Z</updated>
    
    <content type="html"><![CDATA[<p>ready    app已经加载，并且bootstrap已经跑起来了，但还没开始监听请求。<br>lifted    app已经运行，并且监听请求。<br>lower    app已经关闭并且停止监听请求。<br>hook:<hook identity="">: loaded    The hook with the specified identity loaded and ran its initialize() method successfully.</hook></p>
<p>sails生命周期：<br>1.加载配置覆盖，根据实际开发的配置覆盖默认配置<br>2.加载用户配置，就是加载其他的没有被覆盖但是框架中默认的配置<br>3.加载钩子，加载其他钩子core hook会是第一个加载的然后就是user hooks和installable hooks<br>4.明确路由，准备好路由和对应事件。<br>5.暴露全局变量，在钩子都准备好之后会暴露全局变量（例如sails对象，models的数据库，service方法，_（lodash）和async等）<br>6.初始化app运行，lift() === load() + initialize() 加载 + 初始化</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ready    app已经加载，并且bootstrap已经跑起来了，但还没开始监听请求。&lt;br&gt;lifted    app已经运行，并且监听请求。&lt;br&gt;lower    app已经关闭并且停止监听请求。&lt;br&gt;hook:&lt;hook identity=&quot;&quot;&gt;: loade
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="sails" scheme="https://qiil.github.io/qill.github.io/tags/sails/"/>
    
  </entry>
  
  <entry>
    <title>Rockmongo配置详解</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/27/Rockmongo%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/27/Rockmongo配置详解/</id>
    <published>2017-07-27T15:10:41.000Z</published>
    <updated>2017-07-27T15:13:57.013Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了docker配置Rockmongo的流程：<br>下面是rockmongo的相关的配置<br>打开RockMongo安装目录下的config.php，所有的配置都在这里。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#进入里面的shell</span></div><div class="line">docker <span class="built_in">exec</span> -it CONTENER ID /bin/bash </div><div class="line"><span class="built_in">cd</span> app</div><div class="line">vim config.php</div></pre></td></tr></table></figure>
<p>###认证</p>
<ul>
<li><strong>mongo_auth 和control_auth</strong></li>
</ul>
<p>在开始使用RockMongo之前，你需要决定使用哪种校验方式。</p>
<pre><code>1. 如果mongo_auth被设成了true，用户必须使用MongoDB中的用户名和密码（由命令db.addUser()添加），所以配置中的mongo_user, mongo_pass和mongo_db就不再需要了，因为用户可以通过界面输入这些信息。

2. 如果control_auth被设置了true，而且mongo_auth设成了false，用户必须根据control_users选项的配置进行登录，mongo_user, mongo_pass和mongo_db就生效了。为了安全起见，安装完毕之后，应该尽快将默认的用户名和密码改成一个较为复杂的用户名和密码。

3. 如果mongo_auth和control_auth都被设置了false，则用户无需用户名和密码即可登录。
</code></pre><ul>
<li><strong>mongo_auth示范</strong></li>
</ul>
<p>你使用MongoDB的用户名、密码和数据库名进行登录：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;  <span class="comment">//界面显示的名字，取一个自己能识别的就行</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;    <span class="comment">//服务器的host</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;         <span class="comment">//服务器的端口</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;             <span class="comment">//关于超时的设置后面讲述</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">true</span>;          <span class="comment">//启用MongoDB校验 </span></div><div class="line">$i ++;                                                  <span class="comment">//i++后面能配置另一个数据库的链接信息，所以配置完一个数据库记得i++</span></div></pre></td></tr></table></figure></p>
<ul>
<li><strong>control_auth示范</strong></li>
</ul>
<p>你使用control_users中的配置进行登录。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;   <span class="comment">//同上</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;      <span class="comment">//同上</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;          <span class="comment">//同上</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;            <span class="comment">//同上</span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_db"] = "MONGO_DATABASE";  //需要连接的数据库名</span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_user"] = "MONGO_USERNAME"   //数据库中的用户名</span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_pass"] = "MONGO_PASSWORD";  //对应密码</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;<span class="comment">//禁用MongoDB校验  </span></div><div class="line">   </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_auth"</span>] = <span class="keyword">true</span>;<span class="comment">//启用登录控制校验  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"admin"</span>] = <span class="string">"admin"</span>;<span class="comment">//前一个是admin用户名，后一个admin是密码，可任意修改。这里是在rockmongo中用作登录的用户名和密码</span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"iwind"</span>] = <span class="string">"123456"</span>;<span class="comment">//在下面可以复制更多的用户  </span></div><div class="line">$i ++;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>无认证示范</strong></li>
</ul>
<p>你无需任何用户名和密码即可登录。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;  </div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_db"] = "MONGO数据库名";  </span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_user"] = "MONGO用户名"  </span></div><div class="line"><span class="comment">//$MONGO["servers"][$i]["mongo_pass"] = "MONGO密码";  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;<span class="comment">//禁用MongoDB校验  </span></div><div class="line">   </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_auth"</span>] = <span class="keyword">false</span>;<span class="comment">//禁用登录控制校验  </span></div><div class="line">$i ++;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>config.php中Mongo具体配置说明</strong></li>
</ul>
<ol>
<li>mongo_name</li>
</ol>
<p>mongo服务器名字，可以是一个易懂的名字<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"Localhost"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>mongo_host</li>
</ol>
<p>mongo主机地址<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"127.0.0.1"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>mongo_port</li>
</ol>
<p>mongo端口<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27017"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>mongo_db</li>
</ol>
<p>默认连接的数据库名称，只有mongo_auth=false的时候生效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_db"</span>] = <span class="string">"my_own_database"</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>mongo_user</p>
<p>MongoDB验证的用户名，只有当mongo_auth=false时生效。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_user"</span>] = <span class="string">""</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>mongo_pass</p>
<p>MongoDB验证的密码，只有当mongo_auth=false时生效。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_pass"</span>] = <span class="string">""</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>mongo_auth</p>
</li>
</ol>
<p>是否开启MongoDB验证，如果该选项为true，则你登录时需要填写MongoDB中生成的用户名和密码。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>mongo_timeout</p>
<p>MongoDB连接超时时间，以秒为单位，如果设置0，则永远不超时。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_timeout"</span>] = <span class="number">0</span>;</div><div class="line">```   </div><div class="line">关于长查询的一个问题: http:<span class="comment">//code.google.com/p/rock-php/issues/detail?id=177</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="number">9.</span> mongo_options</div><div class="line"></div><div class="line">MongoDB连接的附加选项。</div><div class="line">```php</div><div class="line">$MONGO[<span class="string">"servers"</span>][$i] = <span class="keyword">array</span>(<span class="string">"replicaSet"</span> =&gt; <span class="string">"xxxxx"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><strong>Controls</strong></li>
</ul>
<ol>
<li>control_auth</li>
</ol>
<p>开启控制控制面板验证，只有当mongo_auth=false时有效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_auth"</span>] = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>control_users</li>
</ol>
<p>其中一个控制用户[USERNAME]=PASSWORD，只有当control_auth=true时生效。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"myusername"</span>] = <span class="string">"mypassword"</span>;  </div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"iwind"</span>] = <span class="string">"123456"</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>UI方面的配置</strong></li>
</ul>
<ol>
<li>ui_only_dbs</li>
</ol>
<p>需要显示的数据库，可以是一个字符串或者一个数组，如果这个列表不是空的那么不在这个列表上的数据库就不会被看到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_only_dbs"</span>] = <span class="string">"admin,local"</span>;<span class="comment">//a string  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_only_dbs"</span>] = <span class="keyword">array</span>( <span class="string">"admin"</span>, <span class="string">"local"</span> );<span class="comment">//an array</span></div></pre></td></tr></table></figure></p>
<ol>
<li>ui_hide_dbs</li>
</ol>
<p>需要隐藏的数据库，可以是一个字符串或者一个数组。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_dbs"</span>] = <span class="string">"shop,merchant"</span>;<span class="comment">//a string  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_dbs"</span>] = <span class="keyword">array</span>(<span class="string">"shop"</span>, <span class="string">"merchant"</span>);<span class="comment">//an array</span></div></pre></td></tr></table></figure></p>
<ol>
<li>ui_hide_collections</li>
</ol>
<p>需要隐藏的集合，可以是一个字符串或者数组，每一个集合的名称都可以用正则表达式表达<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_collections"</span>] = <span class="string">"users,admins"</span>;<span class="comment">//hide users and admins colleciton  </span></div><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_collections"</span>] = <span class="string">"mail_(.*)"</span>;<span class="comment">//hide all collections whose prefix is "mail_"</span></div></pre></td></tr></table></figure></p>
<ol>
<li>ui_hide_system_collections</li>
</ol>
<p>如果我们想隐藏系统的集合的话，例如system.js， system.indexes，等，就把这个选项设置默认为false<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"ui_hide_system_collections"</span>] = <span class="keyword">false</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>MongoHQ配置</strong></li>
</ul>
<p>有两种方式，可以登录MongoHQ的MongoDB数据库。</p>
<ol>
<li>Log-in with MongoHQ account<pre><code class="php">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_name"</span>] = <span class="string">"MongoHQ"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"flame.local.mongohq.com"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27075"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">true</span>;  
$i ++;
</code></pre>
Then on log-in screen, you should input the username and password, dbname which registered on MongoHQ, then click “log-in”.</li>
</ol>
<ol>
<li>Log-in with control account<pre><code class="php">$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_host"</span>] = <span class="string">"flame.local.mongohq.com"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_port"</span>] = <span class="string">"27075"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_user"</span>] = <span class="string">"MongoHQ account"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_pass"</span>] = <span class="string">"MongoHQ password"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_db"</span>] = <span class="string">"MongoHQ Database Name"</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"mongo_auth"</span>] = <span class="keyword">false</span>;  
$MONGO[<span class="string">"servers"</span>][$i][<span class="string">"control_users"</span>][<span class="string">"admin"</span>] = <span class="string">"123456"</span>;<span class="comment">//control user name  is "admin", password is "123456"  </span>
$i ++;
</code></pre>
Change mongo_user, mongo_pass and mongo_db to yours, then you can log-in with control user name and password (admin/123456 in this example).</li>
</ol>
<p>原文链接：<br><a href="http://rockmongo.com/wiki/configuration?lang=zh_cn" target="_blank" rel="external">http://rockmongo.com/wiki/configuration?lang=zh_cn</a><br><a href="http://www.cnblogs.com/moqiang02/p/4061140.html" target="_blank" rel="external">http://www.cnblogs.com/moqiang02/p/4061140.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面介绍了docker配置Rockmongo的流程：&lt;br&gt;下面是rockmongo的相关的配置&lt;br&gt;打开RockMongo安装目录下的config.php，所有的配置都在这里。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
      <category term="linux琐碎事" scheme="https://qiil.github.io/qill.github.io/categories/linux%E7%90%90%E7%A2%8E%E4%BA%8B/"/>
    
    
      <category term="rockmongo" scheme="https://qiil.github.io/qill.github.io/tags/rockmongo/"/>
    
      <category term="mongodb" scheme="https://qiil.github.io/qill.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>docker配置rockmongo</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/27/docker%E9%85%8D%E7%BD%AErockmongo/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/27/docker配置rockmongo/</id>
    <published>2017-07-27T15:10:24.000Z</published>
    <updated>2017-07-27T15:12:56.333Z</updated>
    
    <content type="html"><![CDATA[<p>###docker部署rockmongo<br>用到的工具：<br>三个配置文件，1.config.php， 2.dockerfile  3. rockmongo.conf</p>
<ul>
<li>然后进入目录控制台：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker build -t rockmongo .</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>*docker构建加速可以看下面<a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="external">这里</a></p>
</blockquote>
<ul>
<li><p>构建完成后运行项目：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 查看镜像</span></div><div class="line">sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">rockmongo           latest              44f035828f9c        About an hour ago   220MB</div><div class="line">ubuntu              14.04               54333f1de4ed        3 days ago          188MB</div><div class="line"><span class="comment">### 根据REPOSITORY运行相关项目</span></div><div class="line">sudo docker run -d -p 8006:8006 --name rockmongo rockmongo</div><div class="line"><span class="comment">### 查看项目，看到真的跑起来了 ID 是第一条：3e18d38b5353这样子</span></div><div class="line">sudo docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</div><div class="line">3e18d38b5353        rockmongo           <span class="string">"/bin/sh -c 'servi..."</span>   33 minutes ago      Up 33 minutes       0.0.0.0:8006-&gt;8006/tcp   rockmongo</div></pre></td></tr></table></figure>
</li>
<li><p>这就算是部署完成了，但是里面config.php的配置是需要在本地改一改的，因为dockerfile是根据我本地配置的，难免不同机器上的是不一样的，那么说道配置就有两种方式</p>
<ol>
<li>是在download下来的配置文件config.php中修改（具体修改下面详细描述）然后重新构建（见上面第一步），这个比较麻烦。</li>
<li>是在构建好项目后：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">### 查看项目</span></div><div class="line">sudo docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</div><div class="line">3e18d38b5353        rockmongo           <span class="string">"/bin/sh -c 'servi..."</span>   33 minutes ago      Up 33 minutes       0.0.0.0:8006-&gt;8006/tcp   rockmongo</div><div class="line"></div><div class="line"><span class="comment">### 进入项目内部</span></div><div class="line">sudo docker <span class="built_in">exec</span> -it  对应的CONTAINER ID  /bin/bash</div><div class="line"></div><div class="line"><span class="comment">### 现在进入项目内部了，进入app,就可以看到congfig.php了</span></div><div class="line">root@3e18d38b5353:<span class="comment"># ls</span></div><div class="line">app  bin  boot  build  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</div><div class="line">root@3e18d38b5353:/app<span class="comment"># ls</span></div><div class="line">CHANGELOG.txt  INSTALL.txt  LICENSE.txt  README.txt  app  config.php  config.sample.php  index.php  info.php  js  robots.txt  rock.php  themes</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>使用vim打开config.php按照本地的mongo编辑相关信息就可以了。只要保存好，就会自动重启项目的，然后浏览器登录localhost:8006就可以愉快地用上rockmongo了：<br><img src="http://oqzgtjqen.bkt.clouddn.com/docker_rockmongo" alt=""></p>
</li>
<li><p>最后关于config.php的配置选项详细可以看<a href="https://google.com" target="_blank" rel="external">这里</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###docker部署rockmongo&lt;br&gt;用到的工具：&lt;br&gt;三个配置文件，1.config.php， 2.dockerfile  3. rockmongo.conf&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;然后进入目录控制台：&lt;figure class=&quot;highlight ba
    
    </summary>
    
      <category term="linux琐碎事" scheme="https://qiil.github.io/qill.github.io/categories/linux%E7%90%90%E7%A2%8E%E4%BA%8B/"/>
    
    
      <category term="rockmongo" scheme="https://qiil.github.io/qill.github.io/tags/rockmongo/"/>
    
      <category term="mongodb" scheme="https://qiil.github.io/qill.github.io/tags/mongodb/"/>
    
      <category term="docker" scheme="https://qiil.github.io/qill.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>nrm换环境工具</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/20/nrm%E6%8D%A2%E7%8E%AF%E5%A2%83%E5%B7%A5%E5%85%B7-1/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/20/nrm换环境工具-1/</id>
    <published>2017-07-20T13:46:47.000Z</published>
    <updated>2017-07-20T13:48:21.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关github链接："><a href="#相关github链接：" class="headerlink" title="相关github链接："></a>相关github链接：</h3><p><a href="https://github.com/Pana/nrm" target="_blank" rel="external">https://github.com/Pana/nrm</a></p>
<p>因为镜像问题，有时用npm安装依赖会比较慢，这时我们通常都会考虑换一下环境，nrm就集成了一些常用的环境可供使用，而且命令也很简单，赶紧用起来吧！</p>
<p>###Install<br>安装完node和npm后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g nrm</div></pre></td></tr></table></figure></p>
<p>可以用nrm ls命令查看有什么镜像可用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ nrm ls</div><div class="line">* npm -----  https://registry.npmjs.org/</div><div class="line">  cnpm ----  http://r.cnpmjs.org/</div><div class="line">  taobao --  https://registry.npm.taobao.org/</div><div class="line">  nj ------  https://registry.nodejitsu.com/</div><div class="line">  rednpm -- http://registry.mirror.cqupt.edu.cn</div><div class="line">  skimdb -- https://skimdb.npmjs.com/registry</div></pre></td></tr></table></figure></p>
<p>利用nrm use命令切换镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nrm use cnpm</div><div class="line">    Registry has been <span class="built_in">set</span> to: http://r.cnpmjs.org/</div><div class="line"><span class="comment">#表示切换成功了</span></div></pre></td></tr></table></figure></p>
<p>nrm还可以通过命令添加镜像和删除镜像，具体就不一一介绍了，see you！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关github链接：&quot;&gt;&lt;a href=&quot;#相关github链接：&quot; class=&quot;headerlink&quot; title=&quot;相关github链接：&quot;&gt;&lt;/a&gt;相关github链接：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Pana/n
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="nrm" scheme="https://qiil.github.io/qill.github.io/tags/nrm/"/>
    
  </entry>
  
  <entry>
    <title>nrm换环境工具</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/13/nrm%E6%8D%A2%E7%8E%AF%E5%A2%83%E5%B7%A5%E5%85%B7/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/13/nrm换环境工具/</id>
    <published>2017-07-12T16:02:45.000Z</published>
    <updated>2017-07-12T16:03:53.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关github链接："><a href="#相关github链接：" class="headerlink" title="相关github链接："></a>相关github链接：</h3><p><a href="https://github.com/Pana/nrm" target="_blank" rel="external">https://github.com/Pana/nrm</a></p>
<p>因为镜像问题，有时用npm安装依赖会比较慢，这时我们通常都会考虑缓缓环境，nrm就集成了一些常用的环境可供使用，而且命令也很简单，赶紧用起来吧！</p>
<p>###Install<br>安装完node和npm后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g nrm</div></pre></td></tr></table></figure></p>
<p>可以用nrm ls命令查看有什么镜像可用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ nrm ls</div><div class="line">* npm -----  https://registry.npmjs.org/</div><div class="line">  cnpm ----  http://r.cnpmjs.org/</div><div class="line">  taobao --  https://registry.npm.taobao.org/</div><div class="line">  nj ------  https://registry.nodejitsu.com/</div><div class="line">  rednpm -- http://registry.mirror.cqupt.edu.cn</div><div class="line">  skimdb -- https://skimdb.npmjs.com/registry</div></pre></td></tr></table></figure></p>
<p>利用nrm use命令切换镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nrm use cnpm</div><div class="line">    Registry has been <span class="built_in">set</span> to: http://r.cnpmjs.org/</div><div class="line"><span class="comment">#表示切换成功了</span></div></pre></td></tr></table></figure></p>
<p>nrm还可以通过命令添加镜像和删除镜像，具体就不一一介绍了，see you！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关github链接：&quot;&gt;&lt;a href=&quot;#相关github链接：&quot; class=&quot;headerlink&quot; title=&quot;相关github链接：&quot;&gt;&lt;/a&gt;相关github链接：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Pana/n
    
    </summary>
    
      <category term="linux琐碎事" scheme="https://qiil.github.io/qill.github.io/categories/linux%E7%90%90%E7%A2%8E%E4%BA%8B/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="ubuntu" scheme="https://qiil.github.io/qill.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>nvm 换环境神器 nrm</title>
    <link href="https://qiil.github.io/qill.github.io/2017/07/12/nvm%20%E6%8D%A2%E7%8E%AF%E5%A2%83%E7%A5%9E%E5%99%A8%20nrm/"/>
    <id>https://qiil.github.io/qill.github.io/2017/07/12/nvm 换环境神器 nrm/</id>
    <published>2017-07-12T15:56:39.000Z</published>
    <updated>2017-07-12T16:00:43.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="相关github链接："><a href="#相关github链接：" class="headerlink" title="相关github链接："></a>相关github链接：</h3><p><a href="https://github.com/Pana/nrm" target="_blank" rel="external">https://github.com/Pana/nrm</a></p>
<p>因为镜像问题，有时用npm安装依赖会比较慢，这时我们通常都会考虑缓缓环境，nrm就集成了一些常用的环境可供使用，而且命令也很简单，赶紧用起来吧！</p>
<p>###Install<br>安装完node和npm后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g nrm</div></pre></td></tr></table></figure></p>
<p>可以用nrm ls命令查看有什么镜像可用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ nrm ls</div><div class="line">* npm -----  https://registry.npmjs.org/</div><div class="line">  cnpm ----  http://r.cnpmjs.org/</div><div class="line">  taobao --  https://registry.npm.taobao.org/</div><div class="line">  nj ------  https://registry.nodejitsu.com/</div><div class="line">  rednpm -- http://registry.mirror.cqupt.edu.cn</div><div class="line">  skimdb -- https://skimdb.npmjs.com/registry</div></pre></td></tr></table></figure></p>
<p>利用nrm use命令切换镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ nrm use cnpm</div><div class="line">    Registry has been <span class="built_in">set</span> to: http://r.cnpmjs.org/</div><div class="line"><span class="comment">#表示切换成功了</span></div></pre></td></tr></table></figure></p>
<p>nrm还可以通过命令添加镜像和删除镜像，具体就不一一介绍了，see you！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;相关github链接：&quot;&gt;&lt;a href=&quot;#相关github链接：&quot; class=&quot;headerlink&quot; title=&quot;相关github链接：&quot;&gt;&lt;/a&gt;相关github链接：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Pana/n
    
    </summary>
    
      <category term="linux琐碎事" scheme="https://qiil.github.io/qill.github.io/categories/linux%E7%90%90%E7%A2%8E%E4%BA%8B/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="linux" scheme="https://qiil.github.io/qill.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>用node做一个基于TCP的聊天程序</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/23/%E7%94%A8node%E5%81%9A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E6%B5%8F%E8%A7%88%E7%A8%8B%E5%BA%8F/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/23/用node做一个文件夹浏览程序/</id>
    <published>2017-06-23T09:21:01.000Z</published>
    <updated>2017-06-23T09:59:34.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Github项目链接"><a href="#Github项目链接" class="headerlink" title="Github项目链接"></a>Github项目链接</h3><p><a href="https://github.com/QiIL/tcp-chat" target="_blank" rel="external">https://github.com/QiIL/tcp-chat</a></p>
<h3 id="程序简介"><a href="#程序简介" class="headerlink" title="程序简介"></a>程序简介</h3><p>首先用到的是 net 模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="服务器的具体细节："><a href="#服务器的具体细节：" class="headerlink" title="服务器的具体细节："></a>服务器的具体细节：</h3><p>1.有新的成员连接需要需要保存该成员，连接数加1<br>2.监听3000端口<br>3.监听断开连接事件，连接数减1，把该成员移除<br>4.监听输入事件，第一个输入需要输入一个nickname，其他输入视为聊天内容向除了自己意外的所有人推送内容</p>
<p>样例：<br><img src="http://oqzgtjqen.bkt.clouddn.com/tcp-chat1.png" alt=""><br><img src="http://oqzgtjqen.bkt.clouddn.com/tcp-chat2.png" alt=""></p>
<center>完。</center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Github项目链接&quot;&gt;&lt;a href=&quot;#Github项目链接&quot; class=&quot;headerlink&quot; title=&quot;Github项目链接&quot;&gt;&lt;/a&gt;Github项目链接&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/QiIL/tcp-c
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Tiny语言语法树的生成</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/23/Tiny%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95%E6%A0%91%E7%9A%84%E7%94%9F%E6%88%90/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/23/Tiny语言语法树的生成/</id>
    <published>2017-06-23T02:01:03.000Z</published>
    <updated>2017-06-23T10:00:25.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用户按照Tiny语法编辑源程序（打开源程序文件：.tny文件）后生成改程序的语法树。</p>
<h3 id="Github项目连接："><a href="#Github项目连接：" class="headerlink" title="Github项目连接："></a>Github项目连接：</h3><p><a href="https://github.com/QiIL/tiny-Grammar-analysis" target="_blank" rel="external">https://github.com/QiIL/tiny-Grammar-analysis</a></p>
<h3 id="项目中的文件解释"><a href="#项目中的文件解释" class="headerlink" title="项目中的文件解释"></a>项目中的文件解释</h3><ol>
<li>.tny文件：根据文法规则编辑的样例程序</li>
<li>tree.py：定义多子树的树结构</li>
<li>tiny_analisis.py：自上而下的递归子程序分析程序</li>
<li>analisy_gui.py：程序界面相关</li>
</ol>
<h3 id="文法规则"><a href="#文法规则" class="headerlink" title="文法规则"></a>文法规则</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="formula">$ program -&gt; stmt-sequence</span></div><div class="line">$ stmt-sequence -&gt; statement &#123;; statement&#125;</div><div class="line"><span class="formula">$ statement -&gt; if-stmt | repeat-stmt | assign-stmt | read-stmt | write-stmt | return-stmt</span></div><div class="line">$ While-stmt --&gt; while  exp  do  stmt-sequence  endwhile</div><div class="line">Dowhile-stmt--&gt;do  stmt-sequence  while  exp </div><div class="line"><span class="formula">$ for-stmt--&gt;for identifier:=simple-exp  to  simple-exp  do  stmt-sequence enddo    步长递增1</span></div><div class="line">$ for-stmt--&gt;for identifier:=simple-exp  downto  simple-exp  do  stmt-sequence enddo    步长递减1</div><div class="line"><span class="formula">$ if-stmt -&gt; if exp then stmt-sequence [else stmt-sequence] end</span></div><div class="line">$ repeat-stmt -&gt; repeat stmt-sequence until exp</div><div class="line"><span class="formula">$ assign-stmt -&gt; identifier := exp</span></div><div class="line">$ read-stmt -&gt; read identifier</div><div class="line"><span class="formula">$ write-stmt -&gt; write exp</span></div><div class="line">$ return-stmt -&gt; return simple-exp</div><div class="line"><span class="formula">$ exp -&gt; simple-exp [comparison-op simple-exp]</span></div><div class="line">$ comparison-op -&gt; &lt; | =</div><div class="line"><span class="formula">$ simple-exp -&gt; term &#123;addop term&#125;</span></div><div class="line">$ adddop -&gt; + | -</div><div class="line"><span class="formula">$ term -&gt; factor &#123;mulop factor&#125;</span></div><div class="line">$ mulop -&gt; * | /</div><div class="line"><span class="formula">$ factor -&gt; ( exp ) | number | identifier</span></div></pre></td></tr></table></figure>
<h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>使用了tkinter模块，所以请先安装tkinter模块，安装方法（ubuntu16.04）及运行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo install python-tk</div><div class="line">$ python analisy_gui.py</div></pre></td></tr></table></figure></p>
<p>程序大概像这样：<br><img src="http://oqzgtjqen.bkt.clouddn.com/2017-06-23%2010-09-33%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p>
<center>完。</center>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;p&gt;用户按照Tiny语法编辑源程序（打开源程序文件：.tny文件）后生成改程序的语法树。&lt;/p&gt;
&lt;h3 id=&quot;Github项目连接：&quot;&gt;&lt;a
    
    </summary>
    
      <category term="算法" scheme="https://qiil.github.io/qill.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://qiil.github.io/qill.github.io/tags/python/"/>
    
      <category term="tiny" scheme="https://qiil.github.io/qill.github.io/tags/tiny/"/>
    
      <category term="grammer_tree" scheme="https://qiil.github.io/qill.github.io/tags/grammer-tree/"/>
    
  </entry>
  
  <entry>
    <title>搏击俱乐部-关于精神病的一些思考</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/18/%E6%90%8F%E5%87%BB%E4%BF%B1%E4%B9%90%E9%83%A8-%E5%85%B3%E4%BA%8E%E7%B2%BE%E7%A5%9E%E7%97%85%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/18/搏击俱乐部-关于精神病的一些思考/</id>
    <published>2017-06-18T15:54:10.000Z</published>
    <updated>2017-06-18T16:48:57.099Z</updated>
    
    <content type="html"><![CDATA[<p>我对于这一部分的感受其实比分析每个人的左肩的恶魔与右肩上的天使更深刻。</p>
<p>我回想到自己之前看过一部短片叫《精神分裂》，短片的主角看到了一个陨石砸到了自家的房顶，然后奇怪的事情发生了他的视界与真实偏移了91厘米，在主角的视界中他在真实世界中的身体位置不一样,具体就是这样子的。</p>
<p><center><img src="http://s11.sinaimg.cn/middle/607247fbtb1205948a97a&amp;690" alt=""></center><br>然后他去看医生，医生就当做他是一个异想天开的普通人一样与他聊聊天，主角认为医生并不是很了解他。所以他只好放弃治疗了。</p>
<p>从上帝视角来看，主角并不希望自己变成这个样子，想要变回来，他认为偏移了91厘米让自己的生活出现了极大的混乱，他认为这样子下去他很容易丢掉工作，他不敢让他母亲来探望自己，没事也不敢上街，不敢和他人交流。搏击俱乐部的主角虽然不是是这样子的，但是他拥有双重人格，导演思考角度很好，全篇基本是主角的独白。或许这样是对的，现实中的大多数人的角度去观察这些少数人所总结的事情不一定是正确的，更好的情况是我们能够拥有“上帝视角”，让这些少数人自己叙说他们自己，并且感受到他们的情况才能理解他们罢。</p>
<p>我想到一句话：天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤。但是似乎没那么多人对所谓的大任很有欲望，或许上大街上抓那么几个人做一道选择题：A.假如上天会对你降临一些“灾难”，然后你能够身价多少多少，迎娶白富美。B.你能够平安的健康平庸的的过完你的一生。大多数人的选择会是什么？若是问我，我会回答我选B。</p>
<p>如果说，谁想要一些难题来挑战自己，提升自己，会有很多人说好，来吧。但是，如果把难题和挑战换成病痛呢，说好的，我会觉得你不是傻逼就是真的很有种！</p>
<p>说那么多，不是想说让我们去多多关心生活中的少数人群这种屁话。量子力学的一些周边的理论说，我们不能知道事物真实的样子是什么，我们只能看到我们能看到的东西，我们只能看到一定频段的光谱，只能听到一定频率的声波。但是我们看到的，和听到的就真的是事物原本的样子吗？进化论我们能知道，适者生存这个道理，所以我们想大多数人都是适者，这些少数人不一定是。所以，还是让我们多多关心他们吧:)。</p>
<p>我想和大家分享《精神分裂》这部短片的结局，主角认为只有陨石再来一次才能救他，他等到了第二个陨石，他模仿第一次的时候发生的事情，去陨石附近。陨石掉下来了，当他醒来，他发现，他不仅水平偏移91厘米的问题没有进展，而且垂直方向也偏移了91厘米。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我对于这一部分的感受其实比分析每个人的左肩的恶魔与右肩上的天使更深刻。&lt;/p&gt;
&lt;p&gt;我回想到自己之前看过一部短片叫《精神分裂》，短片的主角看到了一个陨石砸到了自家的房顶，然后奇怪的事情发生了他的视界与真实偏移了91厘米，在主角的视界中他在真实世界中的身体位置不一样,具体就
    
    </summary>
    
      <category term="电影观感" scheme="https://qiil.github.io/qill.github.io/categories/%E7%94%B5%E5%BD%B1%E8%A7%82%E6%84%9F/"/>
    
    
      <category term="fight club" scheme="https://qiil.github.io/qill.github.io/tags/fight-club/"/>
    
  </entry>
  
  <entry>
    <title>搏击俱乐部-与内心邪恶的战争</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/17/%E6%90%8F%E5%87%BB%E4%BF%B1%E4%B9%90%E9%83%A8-%E4%B8%8E%E5%86%85%E5%BF%83%E9%82%AA%E6%81%B6%E7%9A%84%E6%88%98%E4%BA%89/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/17/搏击俱乐部-与内心邪恶的战争/</id>
    <published>2017-06-17T06:59:18.000Z</published>
    <updated>2017-06-20T01:19:59.285Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看完搏击俱乐部，第一感觉很无聊，md 9.0评分的片子这狗样？看完适逢下暴雨下午两三点宿舍就已经天黑了，还有点微微的冷意，加上宿舍奢侈地开着空调还有比这更好的氛围吗，果断睡觉去。一觉直接睡到19.00了，爽得不要不要的。</p>
<p>睡醒之后又想起这部片子了，我记得斌头老师说过一句话，好书永远是你看不懂的书，好电影永远是你看不懂的电影。凡是你看不懂的书那都叫好书，凡是你看不懂的电影都是好电影。所以我想，我智商是不是比别人高那么一点点呢，好像不是。既然世界上那么多人给这部片子高分那它高分就肯定有它的理由嘛。</p>
<p>华丽的分割线（略有剧透）</p>
<hr>
<p>全片就是讲主角与泰勒创造了搏击俱乐部的故事。这句话电影简介有说，其实这句话还是凑个行而已。</p>
<p>真正的正文分割线</p>
<hr>
<p>全片其实是讲主角他自己创建了搏击俱乐部的故事，泰勒是他的另外的人格（个人感觉可以这样说）。主角人设有点类似我们普罗大众，追求优质生活，喜欢展现个性，但又不敢过于张扬的那么一个人。但是这样子并不是他喜欢的，准确地说是主角讨厌这样的生活。主角因为工作关系，他需要经常倒时差，他失眠，焦虑。他其实需要安慰，或者是发泄。</p>
<p>所以他遇到了泰勒，打了他人生的第一次架，然后他觉得很爽，去了一栋报废的楼，泰勒是完全堕落的人，主角并不是，他是有理智的，但是他觉得堕落之后就很爽呀，所以他就在哪里，时不时就去俱乐部打架，白天正常上班。他认为自己能够在白天正常的工作到了其他时间他就可以完全放任自我的日子很爽。恩，很爽吗？我觉得应该是很爽的，从我本身而言。越长大我似乎对越多的东西产生担忧，例如现在我在担忧自己是否能够找得到合适的实习。相比于童年的时候，我也在很多方面有了很多的顾虑，例如我骑车我顾虑会不会撞到别人，会不会破坏公物，会不会摔倒，我敢说我起码前面两条我在童年的时候从来不会是我的顾虑。越是长大会有越多的生活顾虑，这是真的，至于为什么我觉得主角很爽？那是因为我缺乏发泄的平台（或许是我懒得去找一个这样的平台），其实懒并不是原因，更深层的原因是我对很多事物缺乏兴趣，我一直没有真正发自内心的感兴趣过一些事情。所以我认为能放任自我是很爽的事情呢！</p>
<p>肯定有人会说过类似的句子–“每个人都会有自己的阴暗面”。一般来说人都喜欢而且害怕着自己的阴暗面，喜欢是因为自由，害怕则是因为责任。主角在搏击俱乐部的日子就是这样的。当时他内心认为泰勒就是自己想要变成的人。他享受着正常工作和放任自我同时存在的生活，但是影片肯定不会让他那么好过的。泰勒教唆了一堆的极端分子，理性的主角慢慢发现不对劲了，他知道了泰勒就是自己的第二人格而且极端邪恶，他曾经放任的恶魔已经不受控制了。然后主角顺利地走上与恶魔抗争的道路，而且很成功的失败了，从最后的结局来看，他搂着马拉辛格说送她一个礼物时我认为胜利的是泰勒。</p>
<p>这一段本应该有些内容的，不过已经距离看完电影已经两天了，如今已经不知道要写什么了，那就算了罢。</p>
<p>恩，通常来说后面应该跟着一些高中式作文的观点–跟着正义，拒绝邪恶等等，哈哈我就不想写这些东东了。但是对于这部影片却让我想到了之前看过的一部精神病的短片，若是感兴趣不妨移步下一章～</p>
<p>最后补上一句，我现在写文章，我很喜欢口语化，在语句前面加个语气词：恩，额之类的，我觉得在未来的某一天，我回看一定会说这样子看上去很蠢，很low吧（其实现在已经觉得了），但我就是忍不住这么做～</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看完搏击俱乐部，第一感觉很无聊，md 9.0评分的片子这狗样？看完适逢下暴雨下午两三点宿舍就已经天黑了，还有点微微的冷意，加上宿舍奢侈地开着空调还有比这更好的氛围吗，果断睡觉去。一觉直接睡到19.00了，爽得不要不要的。&lt;/p&gt;
&lt;p&gt;睡醒之后又想起这部片子了，我记得斌
    
    </summary>
    
      <category term="电影观感" scheme="https://qiil.github.io/qill.github.io/categories/%E7%94%B5%E5%BD%B1%E8%A7%82%E6%84%9F/"/>
    
    
      <category term="fight club" scheme="https://qiil.github.io/qill.github.io/tags/fight-club/"/>
    
  </entry>
  
  <entry>
    <title>Node事件论调与错误处理</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/12/Node%E4%BA%8B%E4%BB%B6%E8%AE%BA%E8%B0%83%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/12/Node事件论调与错误处理/</id>
    <published>2017-06-12T13:52:56.000Z</published>
    <updated>2017-06-12T14:42:59.610Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，Node出错信息是能够看到堆栈追踪信息的，但是引入事件轮调后就很不一样了例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	b()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	a()</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</div><div class="line">    &#125;, <span class="number">10</span>)</div><div class="line">&#125;</div><div class="line">a()</div></pre></td></tr></table></figure></p>
<p>输出大概像这样（等待1秒）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ node test.js</div><div class="line">throw new Error(<span class="string">'error'</span>)</div><div class="line">Error: error</div><div class="line">    at Timeout._onTimeout (/home/qill/node_learning/test.js:30:9</div><div class="line">)</div><div class="line">    at ontimeout (timers.js:488:11)</div><div class="line">    at tryOnTimeout (timers.js:323:5)</div><div class="line">    at Timer.listOnTimeout (timers.js:283:5)</div></pre></td></tr></table></figure></p>
<p>可以看到是没有堆栈追踪信息输出的。为什么呢，因为想要捕获一个未来才会执行到的函数的错误是不可能的，这会直接抛出未捕获的异常。那么我们就认证一下，是否真的如此<br>我们改一改代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//test.js</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  setTimeout (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    reject(<span class="string">'error'</span>)</div><div class="line">  &#125;, <span class="number">1000</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">  <span class="built_in">console</span>.log(err.message);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们能够捕获这个异常的话应该会输出 error。运行结果（等待1秒后获得的输出）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ node test.js</div><div class="line">reject(<span class="string">'error'</span>)</div><div class="line">    ^</div><div class="line">ReferenceError: reject is not defined</div><div class="line">    at Timeout.setTimeout [as _onTimeout] (/home/qill/node_learn</div><div class="line">ing/test.js:21:5)</div><div class="line">    at ontimeout (timers.js:488:11)</div><div class="line">    at tryOnTimeout (timers.js:323:5)</div><div class="line">    at Timer.listOnTimeout (timers.js:283:5)</div></pre></td></tr></table></figure></p>
<p>可见仍然是未捕获的异常，catch代码没有运行，因为try，catch是同步的而setTimeout是异步的try并不能捕获未来一秒后的异常。如果想要捕获这个异常要怎么办呢，办法是有的。<br>首先安装这个模块<br><code>$ npm i co</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeoutError</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>))</div><div class="line">    &#125;, <span class="number">1000</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">yield</span> timeoutError()</div><div class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.log(err.message)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>把setTimeout封装成一个promise，然后用co模块去获取promise返回的错误对象，然后输出然后输出这个错误对象的信息就可以了。运行结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node test.js</div><div class="line">&gt; error</div></pre></td></tr></table></figure></p>
<center>完。</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，Node出错信息是能够看到堆栈追踪信息的，但是引入事件轮调后就很不一样了例如：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node单线程的世界</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/12/Node%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/12/Node单线程的世界/</id>
    <published>2017-06-12T08:52:02.000Z</published>
    <updated>2017-06-12T09:29:19.907Z</updated>
    
    <content type="html"><![CDATA[<p>Node 是单线程的。<br>何为单线程： 简单的理解就是，在一个函数执行时，是不可能有第二个函数也在执行的。</p>
<p>证明代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">"single_thread.js"</span></div><div class="line"><span class="keyword">var</span> start = <span class="built_in">Date</span>.now()</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - start);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5555555555</span>; i++)&#123;&#125;</div><div class="line">&#125;, <span class="number">1000</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - start);</div><div class="line">&#125;, <span class="number">2000</span>);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node single_thread.js</div><div class="line">&gt; 1009</div><div class="line">&gt; 6597</div></pre></td></tr></table></figure>
<p>首先说明代码要做的事：第一个setTimeout()方法会在1000毫秒后调用回调函数从而执行函数内容–输出调用该函数与开始程序的时间差。第二个setTimeout()方法会在2000毫秒后调用回调函数执行相应函数内容–输出调用该函数与开始程序的时间差。</p>
<p>观察输出可以得到，第一个输出：1009其中9毫秒用在调用函数上，有一点时间上的差别是可以接受的。但是第二个输出：6597就太夸张了，因为，代码设定上他应该输出一个2000毫秒多一点的值才对，但是程序输出的却是一个6000多毫秒的值。为什么？我们不妨从头开始跑一下我们的程序。</p>
<ol>
<li>首先start变量获取到了开始时间。</li>
<li>setTimeout()方法，但是需要等带1000毫秒的回调函数调用</li>
<li>setTimeout()方法，但是需要等待2000毫秒的回调函数调用</li>
<li><strong>距离第一个setTimeout()方法1000毫秒过后，回调函数执行</strong>，输出时间差。</li>
<li>执行第一个函数的for语句</li>
<li>距离第二个setTimeout()方法2000毫秒过后，回调函数执行，<strong>但是上一个setTimeout()方法并没有执行完成，所以回调函数被JavaScript阻塞</strong></li>
<li><strong>当第一个setTimeout()方法中的for语句执行完后，第二个setTimeout()方法的回调函数可以执行了，然后输出时间差</strong></li>
</ol>
<p>由此可见，Node是单线程的（在一个函数执行时，不可能有第二个函数同时也在执行）。</p>
<p>当然了，这样的行为方式是不理想的，事件轮调是Node IO的基础核心。既然超时可以延迟，那HTTP请求以及其他形式的的IO也可以如此。也就意味着，HTTP服务器每秒处理的请求数量减少了，效率也降低了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node 是单线程的。&lt;br&gt;何为单线程： 简单的理解就是，在一个函数执行时，是不可能有第二个函数也在执行的。&lt;/p&gt;
&lt;p&gt;证明代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>node.js阻塞与非阻塞</title>
    <link href="https://qiil.github.io/qill.github.io/2017/06/08/node-js%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <id>https://qiil.github.io/qill.github.io/2017/06/08/node-js阻塞与非阻塞/</id>
    <published>2017-06-08T15:22:30.000Z</published>
    <updated>2017-06-12T08:53:05.606Z</updated>
    
    <content type="html"><![CDATA[<p>首先从区分两段代码开始:</p>
<h3 id="php-代码"><a href="#php-代码" class="headerlink" title="php 代码"></a>php 代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">print</span> (<span class="string">'hello'</span>);</div><div class="line">$ sleep(<span class="number">5</span>);</div><div class="line">$ <span class="keyword">print</span> (<span class="string">'world'</span>);</div><div class="line">$ <span class="keyword">print</span> (<span class="string">'thanks'</span>);</div></pre></td></tr></table></figure>
<h3 id="Node-代码"><a href="#Node-代码" class="headerlink" title="Node 代码"></a>Node 代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</div><div class="line">$ setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'world'</span>)</div><div class="line">&#125;&#125;, <span class="number">5000</span>)</div><div class="line">$ <span class="built_in">console</span>.log(<span class="string">'thanks'</span>)</div></pre></td></tr></table></figure>
<p>第一段脚本会输出：</p>
<blockquote>
<p>hello<br>world<br>thanks</p>
</blockquote>
<p>第二段脚本会输出：</p>
<blockquote>
<p>hello<br>thanks<br>world</p>
</blockquote>
<p>可以看出区别了，Node.js使用了事件论调机制，所以称它是非阻塞的。<br>事件论调意味着，Node会注册事件，然后不断地询问内核这些事件是否已经分发。当事件分发时，对应的回调函数就会触发完成相应事件，然后继续执行后续语句。<br>反观PHP代码中的sleep一旦执行，执行会被阻塞一段时间，并且在阻塞时间未达到设定时间之前是不会有任何操作的，也就是同步的。与阻塞相反，setTimeout只是注册了一个事件，而程序会继续执行，所以这是异步的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先从区分两段代码开始:&lt;/p&gt;
&lt;h3 id=&quot;php-代码&quot;&gt;&lt;a href=&quot;#php-代码&quot; class=&quot;headerlink&quot; title=&quot;php 代码&quot;&gt;&lt;/a&gt;php 代码&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;
    
    </summary>
    
      <category term="Node.js之路" scheme="https://qiil.github.io/qill.github.io/categories/Node-js%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="node" scheme="https://qiil.github.io/qill.github.io/tags/node/"/>
    
      <category term="io" scheme="https://qiil.github.io/qill.github.io/tags/io/"/>
    
  </entry>
  
</feed>
